<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kihyun1998.github.io/blog</id>
    <title>A Little "Bit" Blog</title>
    <updated>2023-08-29T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kihyun1998.github.io/blog"/>
    <subtitle>A Little "Bit" Blog</subtitle>
    <icon>https://kihyun1998.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[[SOLID] 객체 지향 프로그래밍(OOP) 원칙]]></title>
        <id>https://kihyun1998.github.io/blog/design pattern rule</id>
        <link href="https://kihyun1998.github.io/blog/design pattern rule"/>
        <updated>2023-08-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[SRP ( 단일 책임의 원칙 : Single Responsibility Principle )]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="srp--단일-책임의-원칙--single-responsibility-principle-">SRP ( 단일 책임의 원칙 : Single Responsibility Principle )<a href="#srp--단일-책임의-원칙--single-responsibility-principle-" class="hash-link" aria-label="Direct link to SRP ( 단일 책임의 원칙 : Single Responsibility Principle )" title="Direct link to SRP ( 단일 책임의 원칙 : Single Responsibility Principle )">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ocp--계방-폐쇄의-원칙--open-close-principle-">OCP ( 계방-폐쇄의 원칙 : Open Close Principle )<a href="#ocp--계방-폐쇄의-원칙--open-close-principle-" class="hash-link" aria-label="Direct link to OCP ( 계방-폐쇄의 원칙 : Open Close Principle )" title="Direct link to OCP ( 계방-폐쇄의 원칙 : Open Close Principle )">​</a></h2><ol><li><p>바뀌는 부분을 캡슐화한다.</p><ul><li>변하는(확장되는) 것과 변하지 않을 것을 구분</li></ul></li><li><p>상속보다는 구성을 활용한다.</p></li><li><p>구현보다는 인터페이스에 맞춰서 프로그래밍한다.</p><ul><li>정의한 인터페이스에 의존</li></ul></li><li><p>상호작용하는 객체 사이에서는 가능하면 느슨한 결합을 사용해야 한다.</p></li><li><p>클래스는 확장에는 열려있어야 하고 변경에는 닫혀 있어야 한다.</p></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="lsp--리스코프-치환의-원칙--the-liskov-substitution-principle-">LSP ( 리스코프 치환의 원칙 : The LisKov Substitution Principle )<a href="#lsp--리스코프-치환의-원칙--the-liskov-substitution-principle-" class="hash-link" aria-label="Direct link to LSP ( 리스코프 치환의 원칙 : The LisKov Substitution Principle )" title="Direct link to LSP ( 리스코프 치환의 원칙 : The LisKov Substitution Principle )">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="isp--인터페이스-분리의-원칙--interface-segregation-principle-">ISP ( 인터페이스 분리의 원칙 : Interface Segregation Principle )<a href="#isp--인터페이스-분리의-원칙--interface-segregation-principle-" class="hash-link" aria-label="Direct link to ISP ( 인터페이스 분리의 원칙 : Interface Segregation Principle )" title="Direct link to ISP ( 인터페이스 분리의 원칙 : Interface Segregation Principle )">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dip--의존성-역전의-원칙--dependency-inversion-principle-">DIP ( 의존성 역전의 원칙 : Dependency Inversion Principle )<a href="#dip--의존성-역전의-원칙--dependency-inversion-principle-" class="hash-link" aria-label="Direct link to DIP ( 의존성 역전의 원칙 : Dependency Inversion Principle )" title="Direct link to DIP ( 의존성 역전의 원칙 : Dependency Inversion Principle )">​</a></h2><ol><li><p>추상화된 것에 의존하게 만들고 구상 클래스에 의존하지 않게 만든다.</p></li><li><p>고수준 구성 요소가 저수준 구성 요소에 의존하면 안되고 항상 추상화에 의존하게 만들어야 한다.
<code>고수준 구성 요소</code> : 다른 <code>저수준 구성 요소</code>에 의해 정의되는 행동이 들어있는 구성 요소</p></li><li><p>변수에 구상 클래스의 레퍼런스를 저장하지 않는다.</p></li><li><p>구상 클래스에서 유도된 클래스를 만들지 않는다.</p></li><li><p>베이스 클래스에 이미 구현되어 있는 메소드를 오버라이드하지 않는다.</p></li></ol>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="design pattern" term="design pattern"/>
        <category label="rule" term="rule"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[전략 패턴 - Strategy pattern]]></title>
        <id>https://kihyun1998.github.io/blog/strategy pattern</id>
        <link href="https://kihyun1998.github.io/blog/strategy pattern"/>
        <updated>2023-08-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[정의]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="정의">정의<a href="#정의" class="hash-link" aria-label="Direct link to 정의" title="Direct link to 정의">​</a></h2><p>알고리즘군을 정의하고 캡슐화해서 각각의 알고리즘군을 수정해서 쓸 수 있게 해준다.
전략 패턴을 사용하면 클라이언트로부터 알고리즘을 분리해서 독립적으로 변경할 수 있다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="특징">특징<a href="#특징" class="hash-link" aria-label="Direct link to 특징" title="Direct link to 특징">​</a></h2><ul><li>함수 중 변하는 코드를 class로 구현하여 상속받는 것이 아닌 interface로 구현하여서 Composition하는게 좋다.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="예시">예시<a href="#예시" class="hash-link" aria-label="Direct link to 예시" title="Direct link to 예시">​</a></h2><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">/src/interfaces/FlyBehavior.java</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token class-name">FlyBehavor</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">fly</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위 처럼 나는 행동 인터페이스를 구현하고</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">/src/classes/Duck.java</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">abstract</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Duck</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">FlyBehavor</span><span class="token plain"> flyBehavor</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">setFlyBehavor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">FlyBehavor</span><span class="token plain"> flyBehavor</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">flyBehavor </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> flyBehavor</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>추상 클래스에선 interface 선언 및 setter를 구현하고</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">/src/classes/FlyNoway ... FlyWithWings.java</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">FlyNoWay</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">implements</span><span class="token plain"> </span><span class="token class-name">FlyBehavor</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">fly</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"I can't fly ! TT"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">FlyRocketPowered</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">implements</span><span class="token plain"> </span><span class="token class-name">FlyBehavor</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">fly</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"ROCKET FLY!!"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">FlyWithWings</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">implements</span><span class="token plain"> </span><span class="token class-name">FlyBehavor</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">fly</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"I can fly!!"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위 코드들처럼 interface를 구현하여서 오버라이딩을 합니다.</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">/src/classes/MallardDuck.java</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">MallardDuck</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">Duck</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token class-name">MallardDuck</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        flyBehavor </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">FlyWithWings</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>생성자에서 새로 구현한 인터페이스로 생성합니다.</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="design pattern" term="design pattern"/>
        <category label="strategy pattern" term="strategy pattern"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcome]]></title>
        <id>https://kihyun1998.github.io/blog/welcome</id>
        <link href="https://kihyun1998.github.io/blog/welcome"/>
        <updated>2023-08-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Docusaurus 첫번째 글이다.]]></summary>
        <content type="html"><![CDATA[<p>Docusaurus 첫번째 글이다.</p><p><img loading="lazy" alt="Docusaurus Plushie" src="/assets/images/docusaurus-plushie-banner-a60f7593abca1e3eef26a9afa244e4fb.jpeg" width="1500" height="500" class="img_ev3q"></p><p>귀여운 공룡 인형이 있다.</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="docusaurus" term="docusaurus"/>
        <category label="first post" term="first post"/>
    </entry>
</feed>