<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kihyun1998.github.io/blog</id>
    <title>A Little "Bit" Blog</title>
    <updated>2024-01-16T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kihyun1998.github.io/blog"/>
    <subtitle>A Little "Bit" Blog</subtitle>
    <icon>https://kihyun1998.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Flutter TIL - 17]]></title>
        <id>https://kihyun1998.github.io/blog/Flutter</id>
        <link href="https://kihyun1998.github.io/blog/Flutter"/>
        <updated>2024-01-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skiploadingonrefresh">skipLoadingOnRefresh<a href="#skiploadingonrefresh" class="hash-link" aria-label="Direct link to skipLoadingOnRefresh" title="Direct link to skipLoadingOnRefresh">​</a></h2><hr><p>when 메서드에서 <code>skipLoadingOnRefresh</code>라는 메서드가 있는데 true가 디폴트다. 새로고침해도 loading 창 안보여주는건데 false로 해주는 편이 좋다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="새로고침">새로고침<a href="#새로고침" class="hash-link" aria-label="Direct link to 새로고침" title="Direct link to 새로고침">​</a></h2><hr><p><code>ref.refresh()</code> 또는 <code>ref.invalidate()</code>를 사용한다. 예시로는 <code>RefreshIndicator</code>로 했지만 버튼으로 하는게 좋은 UI라고 하는 듯</p><p>그리고 윈도우에서는 <code>RefreshIndicator</code> 동작안한다..</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="freezed-class-override">freezed class override<a href="#freezed-class-override" class="hash-link" aria-label="Direct link to freezed class override" title="Direct link to freezed class override">​</a></h2><hr><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token metadata function" style="color:#d73a49">@freezed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> _$</span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'User(id:</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">id</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>freezed data class 에서 User._()를 선언하고 toString을 다시 오버라이딩 할 수 있던데 이에 대해서 조금 더 알아봐야 할 듯</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="TIL" term="TIL"/>
        <category label="플러터" term="플러터"/>
        <category label="flutter" term="flutter"/>
        <category label="revierpod" term="revierpod"/>
        <category label="FutureProvider" term="FutureProvider"/>
        <category label="refresh" term="refresh"/>
        <category label="invalidate" term="invalidate"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter TIL - 16]]></title>
        <id>https://kihyun1998.github.io/blog/Flutter</id>
        <link href="https://kihyun1998.github.io/blog/Flutter"/>
        <updated>2024-01-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skiploadingonrefresh">skipLoadingOnRefresh<a href="#skiploadingonrefresh" class="hash-link" aria-label="Direct link to skipLoadingOnRefresh" title="Direct link to skipLoadingOnRefresh">​</a></h2><hr><p>when 메서드에서 <code>skipLoadingOnRefresh</code>라는 메서드가 있는데 true가 디폴트다. 새로고침해도 loading 창 안보여주는건데 false로 해주는 편이 좋다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="새로고침">새로고침<a href="#새로고침" class="hash-link" aria-label="Direct link to 새로고침" title="Direct link to 새로고침">​</a></h2><hr><p><code>ref.refresh()</code> 또는 <code>ref.invalidate()</code>를 사용한다. 예시로는 <code>RefreshIndicator</code>로 했지만 버튼으로 하는게 좋은 UI라고 하는 듯</p><p>그리고 윈도우에서는 <code>RefreshIndicator</code> 동작안한다..</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="freezed-class-override">freezed class override<a href="#freezed-class-override" class="hash-link" aria-label="Direct link to freezed class override" title="Direct link to freezed class override">​</a></h2><hr><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token metadata function" style="color:#d73a49">@freezed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> _$</span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'User(id:</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">id</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>freezed data class 에서 User._()를 선언하고 toString을 다시 오버라이딩 할 수 있던데 이에 대해서 조금 더 알아봐야 할 듯</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="TIL" term="TIL"/>
        <category label="플러터" term="플러터"/>
        <category label="flutter" term="flutter"/>
        <category label="revierpod" term="revierpod"/>
        <category label="FutureProvider" term="FutureProvider"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter TIL - 15]]></title>
        <id>https://kihyun1998.github.io/blog/Flutter</id>
        <link href="https://kihyun1998.github.io/blog/Flutter"/>
        <updated>2024-01-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skiploadingonrefresh">skipLoadingOnRefresh<a href="#skiploadingonrefresh" class="hash-link" aria-label="Direct link to skipLoadingOnRefresh" title="Direct link to skipLoadingOnRefresh">​</a></h2><hr><p>when 메서드에서 <code>skipLoadingOnRefresh</code>라는 메서드가 있는데 true가 디폴트다. 새로고침해도 loading 창 안보여주는건데 false로 해주는 편이 좋다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="새로고침">새로고침<a href="#새로고침" class="hash-link" aria-label="Direct link to 새로고침" title="Direct link to 새로고침">​</a></h2><hr><p><code>ref.refresh()</code> 또는 <code>ref.invalidate()</code>를 사용한다. 예시로는 <code>RefreshIndicator</code>로 했지만 버튼으로 하는게 좋은 UI라고 하는 듯</p><p>그리고 윈도우에서는 <code>RefreshIndicator</code> 동작안한다..</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="freezed-class-override">freezed class override<a href="#freezed-class-override" class="hash-link" aria-label="Direct link to freezed class override" title="Direct link to freezed class override">​</a></h2><hr><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token metadata function" style="color:#d73a49">@freezed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> _$</span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'User(id:</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">id</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>freezed data class 에서 User._()를 선언하고 toString을 다시 오버라이딩 할 수 있던데 이에 대해서 조금 더 알아봐야 할 듯</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="TIL" term="TIL"/>
        <category label="플러터" term="플러터"/>
        <category label="flutter" term="flutter"/>
        <category label="revierpod" term="revierpod"/>
        <category label="FutureProvider" term="FutureProvider"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter TIL - 14]]></title>
        <id>https://kihyun1998.github.io/blog/Flutter</id>
        <link href="https://kihyun1998.github.io/blog/Flutter"/>
        <updated>2024-01-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skiploadingonrefresh">skipLoadingOnRefresh<a href="#skiploadingonrefresh" class="hash-link" aria-label="Direct link to skipLoadingOnRefresh" title="Direct link to skipLoadingOnRefresh">​</a></h2><hr><p>when 메서드에서 <code>skipLoadingOnRefresh</code>라는 메서드가 있는데 true가 디폴트다. 새로고침해도 loading 창 안보여주는건데 false로 해주는 편이 좋다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="새로고침">새로고침<a href="#새로고침" class="hash-link" aria-label="Direct link to 새로고침" title="Direct link to 새로고침">​</a></h2><hr><p><code>ref.refresh()</code> 또는 <code>ref.invalidate()</code>를 사용한다. 예시로는 <code>RefreshIndicator</code>로 했지만 버튼으로 하는게 좋은 UI라고 하는 듯</p><p>그리고 윈도우에서는 <code>RefreshIndicator</code> 동작안한다..</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="freezed-class-override">freezed class override<a href="#freezed-class-override" class="hash-link" aria-label="Direct link to freezed class override" title="Direct link to freezed class override">​</a></h2><hr><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token metadata function" style="color:#d73a49">@freezed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> _$</span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'User(id:</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">id</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>freezed data class 에서 User._()를 선언하고 toString을 다시 오버라이딩 할 수 있던데 이에 대해서 조금 더 알아봐야 할 듯</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="TIL" term="TIL"/>
        <category label="플러터" term="플러터"/>
        <category label="flutter" term="flutter"/>
        <category label="revierpod" term="revierpod"/>
        <category label="stateprovider" term="stateprovider"/>
        <category label="remote api" term="remote api"/>
        <category label="FutureProvider" term="FutureProvider"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter TIL - 12]]></title>
        <id>https://kihyun1998.github.io/blog/Flutter</id>
        <link href="https://kihyun1998.github.io/blog/Flutter"/>
        <updated>2024-01-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skiploadingonrefresh">skipLoadingOnRefresh<a href="#skiploadingonrefresh" class="hash-link" aria-label="Direct link to skipLoadingOnRefresh" title="Direct link to skipLoadingOnRefresh">​</a></h2><hr><p>when 메서드에서 <code>skipLoadingOnRefresh</code>라는 메서드가 있는데 true가 디폴트다. 새로고침해도 loading 창 안보여주는건데 false로 해주는 편이 좋다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="새로고침">새로고침<a href="#새로고침" class="hash-link" aria-label="Direct link to 새로고침" title="Direct link to 새로고침">​</a></h2><hr><p><code>ref.refresh()</code> 또는 <code>ref.invalidate()</code>를 사용한다. 예시로는 <code>RefreshIndicator</code>로 했지만 버튼으로 하는게 좋은 UI라고 하는 듯</p><p>그리고 윈도우에서는 <code>RefreshIndicator</code> 동작안한다..</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="freezed-class-override">freezed class override<a href="#freezed-class-override" class="hash-link" aria-label="Direct link to freezed class override" title="Direct link to freezed class override">​</a></h2><hr><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token metadata function" style="color:#d73a49">@freezed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> _$</span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'User(id:</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">id</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>freezed data class 에서 User._()를 선언하고 toString을 다시 오버라이딩 할 수 있던데 이에 대해서 조금 더 알아봐야 할 듯</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="TIL" term="TIL"/>
        <category label="플러터" term="플러터"/>
        <category label="flutter" term="flutter"/>
        <category label="revierpod" term="revierpod"/>
        <category label="provider" term="provider"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter TIL - 13]]></title>
        <id>https://kihyun1998.github.io/blog/Flutter</id>
        <link href="https://kihyun1998.github.io/blog/Flutter"/>
        <updated>2024-01-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skiploadingonrefresh">skipLoadingOnRefresh<a href="#skiploadingonrefresh" class="hash-link" aria-label="Direct link to skipLoadingOnRefresh" title="Direct link to skipLoadingOnRefresh">​</a></h2><hr><p>when 메서드에서 <code>skipLoadingOnRefresh</code>라는 메서드가 있는데 true가 디폴트다. 새로고침해도 loading 창 안보여주는건데 false로 해주는 편이 좋다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="새로고침">새로고침<a href="#새로고침" class="hash-link" aria-label="Direct link to 새로고침" title="Direct link to 새로고침">​</a></h2><hr><p><code>ref.refresh()</code> 또는 <code>ref.invalidate()</code>를 사용한다. 예시로는 <code>RefreshIndicator</code>로 했지만 버튼으로 하는게 좋은 UI라고 하는 듯</p><p>그리고 윈도우에서는 <code>RefreshIndicator</code> 동작안한다..</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="freezed-class-override">freezed class override<a href="#freezed-class-override" class="hash-link" aria-label="Direct link to freezed class override" title="Direct link to freezed class override">​</a></h2><hr><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token metadata function" style="color:#d73a49">@freezed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> _$</span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'User(id:</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">id</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>freezed data class 에서 User._()를 선언하고 toString을 다시 오버라이딩 할 수 있던데 이에 대해서 조금 더 알아봐야 할 듯</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="TIL" term="TIL"/>
        <category label="플러터" term="플러터"/>
        <category label="flutter" term="flutter"/>
        <category label="revierpod" term="revierpod"/>
        <category label="code generator" term="code generator"/>
        <category label="provider" term="provider"/>
        <category label="stateProvider" term="stateProvider"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter TIL - 10]]></title>
        <id>https://kihyun1998.github.io/blog/Flutter</id>
        <link href="https://kihyun1998.github.io/blog/Flutter"/>
        <updated>2024-01-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skiploadingonrefresh">skipLoadingOnRefresh<a href="#skiploadingonrefresh" class="hash-link" aria-label="Direct link to skipLoadingOnRefresh" title="Direct link to skipLoadingOnRefresh">​</a></h2><hr><p>when 메서드에서 <code>skipLoadingOnRefresh</code>라는 메서드가 있는데 true가 디폴트다. 새로고침해도 loading 창 안보여주는건데 false로 해주는 편이 좋다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="새로고침">새로고침<a href="#새로고침" class="hash-link" aria-label="Direct link to 새로고침" title="Direct link to 새로고침">​</a></h2><hr><p><code>ref.refresh()</code> 또는 <code>ref.invalidate()</code>를 사용한다. 예시로는 <code>RefreshIndicator</code>로 했지만 버튼으로 하는게 좋은 UI라고 하는 듯</p><p>그리고 윈도우에서는 <code>RefreshIndicator</code> 동작안한다..</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="freezed-class-override">freezed class override<a href="#freezed-class-override" class="hash-link" aria-label="Direct link to freezed class override" title="Direct link to freezed class override">​</a></h2><hr><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token metadata function" style="color:#d73a49">@freezed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> _$</span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'User(id:</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">id</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>freezed data class 에서 User._()를 선언하고 toString을 다시 오버라이딩 할 수 있던데 이에 대해서 조금 더 알아봐야 할 듯</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="TIL" term="TIL"/>
        <category label="개념" term="개념"/>
        <category label="mutex" term="mutex"/>
        <category label="semaphore" term="semaphore"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter TIL - 11]]></title>
        <id>https://kihyun1998.github.io/blog/Flutter</id>
        <link href="https://kihyun1998.github.io/blog/Flutter"/>
        <updated>2024-01-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skiploadingonrefresh">skipLoadingOnRefresh<a href="#skiploadingonrefresh" class="hash-link" aria-label="Direct link to skipLoadingOnRefresh" title="Direct link to skipLoadingOnRefresh">​</a></h2><hr><p>when 메서드에서 <code>skipLoadingOnRefresh</code>라는 메서드가 있는데 true가 디폴트다. 새로고침해도 loading 창 안보여주는건데 false로 해주는 편이 좋다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="새로고침">새로고침<a href="#새로고침" class="hash-link" aria-label="Direct link to 새로고침" title="Direct link to 새로고침">​</a></h2><hr><p><code>ref.refresh()</code> 또는 <code>ref.invalidate()</code>를 사용한다. 예시로는 <code>RefreshIndicator</code>로 했지만 버튼으로 하는게 좋은 UI라고 하는 듯</p><p>그리고 윈도우에서는 <code>RefreshIndicator</code> 동작안한다..</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="freezed-class-override">freezed class override<a href="#freezed-class-override" class="hash-link" aria-label="Direct link to freezed class override" title="Direct link to freezed class override">​</a></h2><hr><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token metadata function" style="color:#d73a49">@freezed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> _$</span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'User(id:</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">id</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>freezed data class 에서 User._()를 선언하고 toString을 다시 오버라이딩 할 수 있던데 이에 대해서 조금 더 알아봐야 할 듯</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="TIL" term="TIL"/>
        <category label="플러터" term="플러터"/>
        <category label="flutter" term="flutter"/>
        <category label="dart" term="dart"/>
        <category label="freezed" term="freezed"/>
        <category label="json_annotation" term="json_annotation"/>
        <category label="riverpod" term="riverpod"/>
        <category label="provider" term="provider"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter TIL - 9]]></title>
        <id>https://kihyun1998.github.io/blog/Flutter</id>
        <link href="https://kihyun1998.github.io/blog/Flutter"/>
        <updated>2024-01-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skiploadingonrefresh">skipLoadingOnRefresh<a href="#skiploadingonrefresh" class="hash-link" aria-label="Direct link to skipLoadingOnRefresh" title="Direct link to skipLoadingOnRefresh">​</a></h2><hr><p>when 메서드에서 <code>skipLoadingOnRefresh</code>라는 메서드가 있는데 true가 디폴트다. 새로고침해도 loading 창 안보여주는건데 false로 해주는 편이 좋다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="새로고침">새로고침<a href="#새로고침" class="hash-link" aria-label="Direct link to 새로고침" title="Direct link to 새로고침">​</a></h2><hr><p><code>ref.refresh()</code> 또는 <code>ref.invalidate()</code>를 사용한다. 예시로는 <code>RefreshIndicator</code>로 했지만 버튼으로 하는게 좋은 UI라고 하는 듯</p><p>그리고 윈도우에서는 <code>RefreshIndicator</code> 동작안한다..</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="freezed-class-override">freezed class override<a href="#freezed-class-override" class="hash-link" aria-label="Direct link to freezed class override" title="Direct link to freezed class override">​</a></h2><hr><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token metadata function" style="color:#d73a49">@freezed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> _$</span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'User(id:</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">id</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>freezed data class 에서 User._()를 선언하고 toString을 다시 오버라이딩 할 수 있던데 이에 대해서 조금 더 알아봐야 할 듯</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="TIL" term="TIL"/>
        <category label="플러터" term="플러터"/>
        <category label="flutter" term="flutter"/>
        <category label="dart" term="dart"/>
        <category label="data class generator" term="data class generator"/>
        <category label="equatable" term="equatable"/>
        <category label="json" term="json"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter TIL - 8]]></title>
        <id>https://kihyun1998.github.io/blog/Flutter</id>
        <link href="https://kihyun1998.github.io/blog/Flutter"/>
        <updated>2024-01-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skiploadingonrefresh">skipLoadingOnRefresh<a href="#skiploadingonrefresh" class="hash-link" aria-label="Direct link to skipLoadingOnRefresh" title="Direct link to skipLoadingOnRefresh">​</a></h2><hr><p>when 메서드에서 <code>skipLoadingOnRefresh</code>라는 메서드가 있는데 true가 디폴트다. 새로고침해도 loading 창 안보여주는건데 false로 해주는 편이 좋다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="새로고침">새로고침<a href="#새로고침" class="hash-link" aria-label="Direct link to 새로고침" title="Direct link to 새로고침">​</a></h2><hr><p><code>ref.refresh()</code> 또는 <code>ref.invalidate()</code>를 사용한다. 예시로는 <code>RefreshIndicator</code>로 했지만 버튼으로 하는게 좋은 UI라고 하는 듯</p><p>그리고 윈도우에서는 <code>RefreshIndicator</code> 동작안한다..</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="freezed-class-override">freezed class override<a href="#freezed-class-override" class="hash-link" aria-label="Direct link to freezed class override" title="Direct link to freezed class override">​</a></h2><hr><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token metadata function" style="color:#d73a49">@freezed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> _$</span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'User(id:</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">id</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>freezed data class 에서 User._()를 선언하고 toString을 다시 오버라이딩 할 수 있던데 이에 대해서 조금 더 알아봐야 할 듯</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="TIL" term="TIL"/>
        <category label="플러터" term="플러터"/>
        <category label="flutter" term="flutter"/>
        <category label="dart" term="dart"/>
        <category label="tree-view" term="tree-view"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git - LF will be replaced by CRLF the next time Git touches it]]></title>
        <id>https://kihyun1998.github.io/blog/Flutter</id>
        <link href="https://kihyun1998.github.io/blog/Flutter"/>
        <updated>2023-12-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skiploadingonrefresh">skipLoadingOnRefresh<a href="#skiploadingonrefresh" class="hash-link" aria-label="Direct link to skipLoadingOnRefresh" title="Direct link to skipLoadingOnRefresh">​</a></h2><hr><p>when 메서드에서 <code>skipLoadingOnRefresh</code>라는 메서드가 있는데 true가 디폴트다. 새로고침해도 loading 창 안보여주는건데 false로 해주는 편이 좋다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="새로고침">새로고침<a href="#새로고침" class="hash-link" aria-label="Direct link to 새로고침" title="Direct link to 새로고침">​</a></h2><hr><p><code>ref.refresh()</code> 또는 <code>ref.invalidate()</code>를 사용한다. 예시로는 <code>RefreshIndicator</code>로 했지만 버튼으로 하는게 좋은 UI라고 하는 듯</p><p>그리고 윈도우에서는 <code>RefreshIndicator</code> 동작안한다..</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="freezed-class-override">freezed class override<a href="#freezed-class-override" class="hash-link" aria-label="Direct link to freezed class override" title="Direct link to freezed class override">​</a></h2><hr><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token metadata function" style="color:#d73a49">@freezed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> _$</span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'User(id:</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">id</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>freezed data class 에서 User._()를 선언하고 toString을 다시 오버라이딩 할 수 있던데 이에 대해서 조금 더 알아봐야 할 듯</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="git" term="git"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter TIL - 7]]></title>
        <id>https://kihyun1998.github.io/blog/Flutter</id>
        <link href="https://kihyun1998.github.io/blog/Flutter"/>
        <updated>2023-12-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skiploadingonrefresh">skipLoadingOnRefresh<a href="#skiploadingonrefresh" class="hash-link" aria-label="Direct link to skipLoadingOnRefresh" title="Direct link to skipLoadingOnRefresh">​</a></h2><hr><p>when 메서드에서 <code>skipLoadingOnRefresh</code>라는 메서드가 있는데 true가 디폴트다. 새로고침해도 loading 창 안보여주는건데 false로 해주는 편이 좋다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="새로고침">새로고침<a href="#새로고침" class="hash-link" aria-label="Direct link to 새로고침" title="Direct link to 새로고침">​</a></h2><hr><p><code>ref.refresh()</code> 또는 <code>ref.invalidate()</code>를 사용한다. 예시로는 <code>RefreshIndicator</code>로 했지만 버튼으로 하는게 좋은 UI라고 하는 듯</p><p>그리고 윈도우에서는 <code>RefreshIndicator</code> 동작안한다..</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="freezed-class-override">freezed class override<a href="#freezed-class-override" class="hash-link" aria-label="Direct link to freezed class override" title="Direct link to freezed class override">​</a></h2><hr><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token metadata function" style="color:#d73a49">@freezed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> _$</span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'User(id:</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">id</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>freezed data class 에서 User._()를 선언하고 toString을 다시 오버라이딩 할 수 있던데 이에 대해서 조금 더 알아봐야 할 듯</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="TIL" term="TIL"/>
        <category label="플러터" term="플러터"/>
        <category label="flutter" term="flutter"/>
        <category label="dart" term="dart"/>
        <category label="future_wait" term="future_wait"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git - 변경사항 취소]]></title>
        <id>https://kihyun1998.github.io/blog/Flutter</id>
        <link href="https://kihyun1998.github.io/blog/Flutter"/>
        <updated>2023-12-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skiploadingonrefresh">skipLoadingOnRefresh<a href="#skiploadingonrefresh" class="hash-link" aria-label="Direct link to skipLoadingOnRefresh" title="Direct link to skipLoadingOnRefresh">​</a></h2><hr><p>when 메서드에서 <code>skipLoadingOnRefresh</code>라는 메서드가 있는데 true가 디폴트다. 새로고침해도 loading 창 안보여주는건데 false로 해주는 편이 좋다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="새로고침">새로고침<a href="#새로고침" class="hash-link" aria-label="Direct link to 새로고침" title="Direct link to 새로고침">​</a></h2><hr><p><code>ref.refresh()</code> 또는 <code>ref.invalidate()</code>를 사용한다. 예시로는 <code>RefreshIndicator</code>로 했지만 버튼으로 하는게 좋은 UI라고 하는 듯</p><p>그리고 윈도우에서는 <code>RefreshIndicator</code> 동작안한다..</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="freezed-class-override">freezed class override<a href="#freezed-class-override" class="hash-link" aria-label="Direct link to freezed class override" title="Direct link to freezed class override">​</a></h2><hr><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token metadata function" style="color:#d73a49">@freezed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> _$</span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'User(id:</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">id</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>freezed data class 에서 User._()를 선언하고 toString을 다시 오버라이딩 할 수 있던데 이에 대해서 조금 더 알아봐야 할 듯</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="git" term="git"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter TIL - 6]]></title>
        <id>https://kihyun1998.github.io/blog/Flutter</id>
        <link href="https://kihyun1998.github.io/blog/Flutter"/>
        <updated>2023-12-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skiploadingonrefresh">skipLoadingOnRefresh<a href="#skiploadingonrefresh" class="hash-link" aria-label="Direct link to skipLoadingOnRefresh" title="Direct link to skipLoadingOnRefresh">​</a></h2><hr><p>when 메서드에서 <code>skipLoadingOnRefresh</code>라는 메서드가 있는데 true가 디폴트다. 새로고침해도 loading 창 안보여주는건데 false로 해주는 편이 좋다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="새로고침">새로고침<a href="#새로고침" class="hash-link" aria-label="Direct link to 새로고침" title="Direct link to 새로고침">​</a></h2><hr><p><code>ref.refresh()</code> 또는 <code>ref.invalidate()</code>를 사용한다. 예시로는 <code>RefreshIndicator</code>로 했지만 버튼으로 하는게 좋은 UI라고 하는 듯</p><p>그리고 윈도우에서는 <code>RefreshIndicator</code> 동작안한다..</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="freezed-class-override">freezed class override<a href="#freezed-class-override" class="hash-link" aria-label="Direct link to freezed class override" title="Direct link to freezed class override">​</a></h2><hr><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token metadata function" style="color:#d73a49">@freezed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> _$</span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'User(id:</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">id</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>freezed data class 에서 User._()를 선언하고 toString을 다시 오버라이딩 할 수 있던데 이에 대해서 조금 더 알아봐야 할 듯</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="TIL" term="TIL"/>
        <category label="플러터" term="플러터"/>
        <category label="flutter" term="flutter"/>
        <category label="dart" term="dart"/>
        <category label="listview" term="listview"/>
        <category label="clipping" term="clipping"/>
        <category label="GestureDetector" term="GestureDetector"/>
        <category label="divider" term="divider"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter TIL - 5]]></title>
        <id>https://kihyun1998.github.io/blog/Flutter</id>
        <link href="https://kihyun1998.github.io/blog/Flutter"/>
        <updated>2023-12-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skiploadingonrefresh">skipLoadingOnRefresh<a href="#skiploadingonrefresh" class="hash-link" aria-label="Direct link to skipLoadingOnRefresh" title="Direct link to skipLoadingOnRefresh">​</a></h2><hr><p>when 메서드에서 <code>skipLoadingOnRefresh</code>라는 메서드가 있는데 true가 디폴트다. 새로고침해도 loading 창 안보여주는건데 false로 해주는 편이 좋다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="새로고침">새로고침<a href="#새로고침" class="hash-link" aria-label="Direct link to 새로고침" title="Direct link to 새로고침">​</a></h2><hr><p><code>ref.refresh()</code> 또는 <code>ref.invalidate()</code>를 사용한다. 예시로는 <code>RefreshIndicator</code>로 했지만 버튼으로 하는게 좋은 UI라고 하는 듯</p><p>그리고 윈도우에서는 <code>RefreshIndicator</code> 동작안한다..</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="freezed-class-override">freezed class override<a href="#freezed-class-override" class="hash-link" aria-label="Direct link to freezed class override" title="Direct link to freezed class override">​</a></h2><hr><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token metadata function" style="color:#d73a49">@freezed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> _$</span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'User(id:</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">id</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>freezed data class 에서 User._()를 선언하고 toString을 다시 오버라이딩 할 수 있던데 이에 대해서 조금 더 알아봐야 할 듯</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="TIL" term="TIL"/>
        <category label="플러터" term="플러터"/>
        <category label="flutter" term="flutter"/>
        <category label="dart" term="dart"/>
        <category label="생성자" term="생성자"/>
        <category label="constructor" term="constructor"/>
        <category label="nullabel" term="nullabel"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter TIL - 4]]></title>
        <id>https://kihyun1998.github.io/blog/Flutter</id>
        <link href="https://kihyun1998.github.io/blog/Flutter"/>
        <updated>2023-12-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skiploadingonrefresh">skipLoadingOnRefresh<a href="#skiploadingonrefresh" class="hash-link" aria-label="Direct link to skipLoadingOnRefresh" title="Direct link to skipLoadingOnRefresh">​</a></h2><hr><p>when 메서드에서 <code>skipLoadingOnRefresh</code>라는 메서드가 있는데 true가 디폴트다. 새로고침해도 loading 창 안보여주는건데 false로 해주는 편이 좋다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="새로고침">새로고침<a href="#새로고침" class="hash-link" aria-label="Direct link to 새로고침" title="Direct link to 새로고침">​</a></h2><hr><p><code>ref.refresh()</code> 또는 <code>ref.invalidate()</code>를 사용한다. 예시로는 <code>RefreshIndicator</code>로 했지만 버튼으로 하는게 좋은 UI라고 하는 듯</p><p>그리고 윈도우에서는 <code>RefreshIndicator</code> 동작안한다..</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="freezed-class-override">freezed class override<a href="#freezed-class-override" class="hash-link" aria-label="Direct link to freezed class override" title="Direct link to freezed class override">​</a></h2><hr><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token metadata function" style="color:#d73a49">@freezed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> _$</span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'User(id:</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">id</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>freezed data class 에서 User._()를 선언하고 toString을 다시 오버라이딩 할 수 있던데 이에 대해서 조금 더 알아봐야 할 듯</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="TIL" term="TIL"/>
        <category label="플러터" term="플러터"/>
        <category label="flutter" term="flutter"/>
        <category label="dart" term="dart"/>
        <category label="function" term="function"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter TIL - 3]]></title>
        <id>https://kihyun1998.github.io/blog/Flutter</id>
        <link href="https://kihyun1998.github.io/blog/Flutter"/>
        <updated>2023-12-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skiploadingonrefresh">skipLoadingOnRefresh<a href="#skiploadingonrefresh" class="hash-link" aria-label="Direct link to skipLoadingOnRefresh" title="Direct link to skipLoadingOnRefresh">​</a></h2><hr><p>when 메서드에서 <code>skipLoadingOnRefresh</code>라는 메서드가 있는데 true가 디폴트다. 새로고침해도 loading 창 안보여주는건데 false로 해주는 편이 좋다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="새로고침">새로고침<a href="#새로고침" class="hash-link" aria-label="Direct link to 새로고침" title="Direct link to 새로고침">​</a></h2><hr><p><code>ref.refresh()</code> 또는 <code>ref.invalidate()</code>를 사용한다. 예시로는 <code>RefreshIndicator</code>로 했지만 버튼으로 하는게 좋은 UI라고 하는 듯</p><p>그리고 윈도우에서는 <code>RefreshIndicator</code> 동작안한다..</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="freezed-class-override">freezed class override<a href="#freezed-class-override" class="hash-link" aria-label="Direct link to freezed class override" title="Direct link to freezed class override">​</a></h2><hr><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token metadata function" style="color:#d73a49">@freezed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> _$</span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'User(id:</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">id</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>freezed data class 에서 User._()를 선언하고 toString을 다시 오버라이딩 할 수 있던데 이에 대해서 조금 더 알아봐야 할 듯</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="TIL" term="TIL"/>
        <category label="플러터" term="플러터"/>
        <category label="flutter" term="flutter"/>
        <category label="riverpod" term="riverpod"/>
        <category label="notifier" term="notifier"/>
        <category label="dart 생성자" term="dart 생성자"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter TIL - 2]]></title>
        <id>https://kihyun1998.github.io/blog/Flutter</id>
        <link href="https://kihyun1998.github.io/blog/Flutter"/>
        <updated>2023-12-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skiploadingonrefresh">skipLoadingOnRefresh<a href="#skiploadingonrefresh" class="hash-link" aria-label="Direct link to skipLoadingOnRefresh" title="Direct link to skipLoadingOnRefresh">​</a></h2><hr><p>when 메서드에서 <code>skipLoadingOnRefresh</code>라는 메서드가 있는데 true가 디폴트다. 새로고침해도 loading 창 안보여주는건데 false로 해주는 편이 좋다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="새로고침">새로고침<a href="#새로고침" class="hash-link" aria-label="Direct link to 새로고침" title="Direct link to 새로고침">​</a></h2><hr><p><code>ref.refresh()</code> 또는 <code>ref.invalidate()</code>를 사용한다. 예시로는 <code>RefreshIndicator</code>로 했지만 버튼으로 하는게 좋은 UI라고 하는 듯</p><p>그리고 윈도우에서는 <code>RefreshIndicator</code> 동작안한다..</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="freezed-class-override">freezed class override<a href="#freezed-class-override" class="hash-link" aria-label="Direct link to freezed class override" title="Direct link to freezed class override">​</a></h2><hr><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token metadata function" style="color:#d73a49">@freezed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> _$</span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'User(id:</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">id</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>freezed data class 에서 User._()를 선언하고 toString을 다시 오버라이딩 할 수 있던데 이에 대해서 조금 더 알아봐야 할 듯</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="TIL" term="TIL"/>
        <category label="플러터" term="플러터"/>
        <category label="flutter" term="flutter"/>
        <category label="const" term="const"/>
        <category label="provider" term="provider"/>
        <category label="riverpod" term="riverpod"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter TIL - 1]]></title>
        <id>https://kihyun1998.github.io/blog/Flutter</id>
        <link href="https://kihyun1998.github.io/blog/Flutter"/>
        <updated>2023-12-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skiploadingonrefresh">skipLoadingOnRefresh<a href="#skiploadingonrefresh" class="hash-link" aria-label="Direct link to skipLoadingOnRefresh" title="Direct link to skipLoadingOnRefresh">​</a></h2><hr><p>when 메서드에서 <code>skipLoadingOnRefresh</code>라는 메서드가 있는데 true가 디폴트다. 새로고침해도 loading 창 안보여주는건데 false로 해주는 편이 좋다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="새로고침">새로고침<a href="#새로고침" class="hash-link" aria-label="Direct link to 새로고침" title="Direct link to 새로고침">​</a></h2><hr><p><code>ref.refresh()</code> 또는 <code>ref.invalidate()</code>를 사용한다. 예시로는 <code>RefreshIndicator</code>로 했지만 버튼으로 하는게 좋은 UI라고 하는 듯</p><p>그리고 윈도우에서는 <code>RefreshIndicator</code> 동작안한다..</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="freezed-class-override">freezed class override<a href="#freezed-class-override" class="hash-link" aria-label="Direct link to freezed class override" title="Direct link to freezed class override">​</a></h2><hr><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token metadata function" style="color:#d73a49">@freezed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> _$</span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'User(id:</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">id</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>freezed data class 에서 User._()를 선언하고 toString을 다시 오버라이딩 할 수 있던데 이에 대해서 조금 더 알아봐야 할 듯</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="TIL" term="TIL"/>
        <category label="플러터" term="플러터"/>
        <category label="flutter" term="flutter"/>
        <category label="Bloc" term="Bloc"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[MVVM 아키텍처]]></title>
        <id>https://kihyun1998.github.io/blog/mvvm</id>
        <link href="https://kihyun1998.github.io/blog/mvvm"/>
        <updated>2023-12-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="관심사-분리">관심사 분리<a href="#관심사-분리" class="hash-link" aria-label="Direct link to 관심사 분리" title="Direct link to 관심사 분리">​</a></h2><hr><p>모듈 별 경계를 나누고 모듈간 약속을 정하는 것 like a 전기 콘센트와 플러그의 관계라고 한다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="mvvm-이론">MVVM 이론<a href="#mvvm-이론" class="hash-link" aria-label="Direct link to MVVM 이론" title="Direct link to MVVM 이론">​</a></h2><hr><p><code>View</code>와 <code>ViewModel</code> 그리고 <code>Model</code>을 나누어 View를 쉽게 변경할 수 있는 목적을 갖고 있는 아키텍처 패턴</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>역할</div><div class="admonitionContent_S0QG"><p><code>View</code> : UI<br>
<code>ViewModel</code>: View 상태 및 로직 담당<br>
<code>Model</code>: 비지니스 로직과 데이터 입출력 담당</p></div></div><p>핵심은 <code>데이터 바인딩</code>이다.</p><p><code>데이터 바인딩</code>이란 간단히 말하면 ViewModel과 View가 서로를 의존하지 않는 것 <code>Provider</code> 패키지를 사용해서 데이터 바인딩 이용한다는데 나는 Bloc를 사용해서 하고 싶다.. 당장은 Provider로 구현해보기</p><p>페이지 마다 하나의 ViewModel이 있어야 하고 ViewModel은 View의 상태와 로직을 관리한다.</p><p>Model은 <code>Service</code>, <code>Model</code>, <code>Repository</code>가 있는데 <code>Service</code>는 전역 상태와 비지니스 로직을 관리하고 <code>Model</code>은 데이터 <code>Repository</code>는 데이터 요청 로직을 담당한다.</p><p>걍 뭔가 어려움 많이 연습해봐야겠다.</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="KOSTA" term="KOSTA"/>
        <category label="플러터" term="플러터"/>
        <category label="flutter" term="flutter"/>
        <category label="mvvm" term="mvvm"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[테스트 코드]]></title>
        <id>https://kihyun1998.github.io/blog/test code</id>
        <link href="https://kihyun1998.github.io/blog/test code"/>
        <updated>2023-12-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><p><a href="https://github.com/flutter/flutter/tree/master/packages/flutter/test/material" target="_blank" rel="noopener noreferrer">테스트 코드 작성 요령</a></p><p>테스트 코드를 작성하면 기능들의 의존성도 확인할 수 있고 테스트할 기능이 많아질 수록 자동화 해놓면 좋다.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>테스트 종류</div><div class="admonitionContent_S0QG"><p><code>단위 테스트 ( Unit Test )</code>: 특정 함수 및 클래스 테스트<br>
<code>위젯 테스트 ( Widget Test )</code>: 단일 위젯 테스트<br>
<code>통합 테스트 ( Integration Test )</code>: 앱의 전체적인 테스트 동작</p></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="단위-테스트">단위 테스트<a href="#단위-테스트" class="hash-link" aria-label="Direct link to 단위 테스트" title="Direct link to 단위 테스트">​</a></h2><hr><p>내장 테스트로 테스트를 진행할 수 있습니다.</p><p>테스트 파일은 <code>파일이름_test.dart</code>여야 한다. 즉 <code>_test.dart</code>로 끝나야 함</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>테스트 관련 함수</div><div class="admonitionContent_S0QG"><p><code>test()</code>: 테스트 시작
<code>expect()</code>: 값 검증<br>
<code>group()</code>: 테스트 그룹 만들기<br>
<code>setUp()</code>: 테스트 시작 전 실행하는 함수(계속 테스트 시작할 때마다 실행)<br>
<code>setUpAll()</code>: 최초 한 번만 실행<br>
<code>tearDown()</code>: 테스트 후 실행<br>
<code>tearDownAll()</code>: 테스트 종료 후 마지막 한 번 실행</p></div></div><p>테스트를 하다보면 왜하나 싶을 수 있는데 변경에 대처하기 위해서 작성하는 것임. 완전 변한다면 또 의미가 없어지긴하는데 리팩토링 했을 때 검증하는 느낌이려나 아직은 잘 모르겠다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="mock-object">Mock Object<a href="#mock-object" class="hash-link" aria-label="Direct link to Mock Object" title="Direct link to Mock Object">​</a></h3><p>api 통신 테스트 같은 경우 외부 변수가 많아서 mock object로 한다.</p><p>왜냐하면 실제 요청 응답은 변수가 많아서... 재현이 어렵다. 그리고 실제로 서버 응답 실패 테스트 같은 경우도 쉽지 않다. mock object를 사용하면 쉽게 할 수 있다.</p><p>mockito랑 build_runner를 사용한다고 한다.</p><p>mockito로 어노테이션 달고 build_runner로 코드 생성하는 거임</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="di--dependency-injection-">DI ( Dependency Injection )<a href="#di--dependency-injection-" class="hash-link" aria-label="Direct link to DI ( Dependency Injection )" title="Direct link to DI ( Dependency Injection )">​</a></h3><p>di를 하는데 생성자를 통해 외부 코드를 받는다인 간단한 개념이라고 한다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="위젯-테스트">위젯 테스트<a href="#위젯-테스트" class="hash-link" aria-label="Direct link to 위젯 테스트" title="Direct link to 위젯 테스트">​</a></h2><hr><p>상호작용, 생김새, 상태 확인을 테스트 한다고 한다.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>위젯 테스트</div><div class="admonitionContent_S0QG"><p><code>testWidgets()</code>: 테스트 진행<br>
<code>pump()</code>: 화면 갱신<br>
<code>find.text()</code>: 특정 테스트 검색<br>
<code>find.byType()</code>: 특정 클래스의 타입과 일치하는 위젯 검색<br>
<code>tester.widget()</code>: 특정 타입의 위젯 가져옴<br>
<code>tester.element()</code>: 특정 위젯의 BuildContext 가져옴</p></div></div><p><a href="https://api.flutter.dev/flutter/flutter_test/matchesGoldenFile.html" target="_blank" rel="noopener noreferrer">golden test</a>도 있다.</p><p>golden test는 이미지 픽셀 비교하는 테스트다 즉 시각적 모습을 테스트할 수 있다.</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">flutter </span><span class="token builtin class-name">test</span><span class="token plain"> --update-goldens</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이걸로 골든테스트 정답 생성해줌 신기하넹.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="통합-테스트">통합 테스트<a href="#통합-테스트" class="hash-link" aria-label="Direct link to 통합 테스트" title="Direct link to 통합 테스트">​</a></h2><hr><p>GUI테스트 EndToEnd라고 합니다.</p><p>실제 에뮬레이터를 통해서 테스트를 하게 된다.</p><p><code>integration_test</code>를 추가해야 한다고 합니다.</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  integration_test:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sdk: flutter</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>dev_dependecies에 붙여넣어주면 된다.</p><p>integration_test라는 폴더를 root에 만들어주고 하면 된다.
아주 신기하다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="테스트-커버리지">테스트 커버리지<a href="#테스트-커버리지" class="hash-link" aria-label="Direct link to 테스트 커버리지" title="Direct link to 테스트 커버리지">​</a></h2><hr><p><a href="https://marketplace.visualstudio.com/items?itemName=Flutterando.flutter-coverage" target="_blank" rel="noopener noreferrer">플러터 커버리지</a></p><p>테스트 코드 기반으로 커버리지 측정을 한다.</p><p><a href="https://marketplace.visualstudio.com/items?itemName=ryanluker.vscode-coverage-gutters" target="_blank" rel="noopener noreferrer">커버리지 거터스</a></p><p>이거는 특정 파일에서 좌측 하단 watch를 눌러보면 어디가 테스트가 안됐는지와 커버리지 % 알려준다.</p><p>hydrated bloc을 사용해보거나 다른 서드파티들 검색해서 찾아보자</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="KOSTA" term="KOSTA"/>
        <category label="플러터" term="플러터"/>
        <category label="flutter" term="flutter"/>
        <category label="테스트 코드" term="테스트 코드"/>
        <category label="test code" term="test code"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[와이어샤크]]></title>
        <id>https://kihyun1998.github.io/blog/와이어샤크</id>
        <link href="https://kihyun1998.github.io/blog/와이어샤크"/>
        <updated>2023-11-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="와이어샤크-설치">와이어샤크 설치<a href="#와이어샤크-설치" class="hash-link" aria-label="Direct link to 와이어샤크 설치" title="Direct link to 와이어샤크 설치">​</a></h2><hr><p><a href="https://www.wireshark.org/" target="_blank" rel="noopener noreferrer">이곳</a>에서 진행할 수 있습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="컴퓨터-네트워크">컴퓨터 네트워크<a href="#컴퓨터-네트워크" class="hash-link" aria-label="Direct link to 컴퓨터 네트워크" title="Direct link to 컴퓨터 네트워크">​</a></h2><hr><p>데이터 통신은 MAC주소가 꼭 필요함. 이걸 논리적으로 바꾼 주소가 IP주소</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="물리주소-확인">물리주소 확인<a href="#물리주소-확인" class="hash-link" aria-label="Direct link to 물리주소 확인" title="Direct link to 물리주소 확인">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">arp </span><span class="token parameter variable" style="color:#36acaa">-a</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>캐시 데이터다. 5분뒤에 지어짐 근데 지우려면</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">apr </span><span class="token parameter variable" style="color:#36acaa">-d</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>캐시가 남는경우는 내가 상대방과 연결을 할 때도 있지만 상대방이 나와 연결할 때도 캐시가 남음.</p><p>그래서 패킷 분석할 때 캐시를 지워야 한다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="dns가-알려준-ip-캐시-정보-확인">dns가 알려준 ip 캐시 정보 확인<a href="#dns가-알려준-ip-캐시-정보-확인" class="hash-link" aria-label="Direct link to dns가 알려준 ip 캐시 정보 확인" title="Direct link to dns가 알려준 ip 캐시 정보 확인">​</a></h3><hr><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ipconfig/displaydns</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>지우기</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ipconfig/flushdns</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="컴퓨터-이름으로-통신">컴퓨터 이름으로 통신<a href="#컴퓨터-이름으로-통신" class="hash-link" aria-label="Direct link to 컴퓨터 이름으로 통신" title="Direct link to 컴퓨터 이름으로 통신">​</a></h3><hr><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">nbtstat </span><span class="token parameter variable" style="color:#36acaa">-n</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>캐시 확인</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">nbtstat </span><span class="token parameter variable" style="color:#36acaa">-c</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>캐시 삭제</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">nbtstat </span><span class="token parameter variable" style="color:#36acaa">-R</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>분석할 때 arp, dns, nbtstat 캐시 지워주고 하는게 좋다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="osi-7-계층">OSI 7 계층<a href="#osi-7-계층" class="hash-link" aria-label="Direct link to OSI 7 계층" title="Direct link to OSI 7 계층">​</a></h3><p>계층을 통과할 때는 관련 헤더가 추가된다. PDU가 있다.</p><p>PDU는 아래 정리..</p><p><code>Presentation</code> : Message</p><p><code>Transport</code> : Segment</p><p><code>Network</code> : packet</p><p><code>Datalink</code> : frame</p><hr><p><code>Application</code> : 통신 software</p><p><code>Presentation</code> : 데이터 포맷 정의 (jpg,png 등)</p><p><code>Session</code> : App 연결 유지 or 해제</p><p><code>Transport</code> : 패킷 분리, 재전송, 에러 검출 (Segment가 전송 최소단위여서)</p><p><code>Network</code> : Segment앞에 논리적 주소(IP)를 추가해서 목적 전달 가능하게 해줌 &gt; Packet</p><p><code>Datalink</code> : 물리 주소를 추가해서 전달(MAC,DLCI) &gt; Frame</p><p><code>Pyhsical</code> : bit를 전기신호로 변환, 전기적, 기능적 특성, 절차적 특성, 기계적 특성에 대한 약속</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tcpip-4-계층">TCP/IP 4 계층<a href="#tcpip-4-계층" class="hash-link" aria-label="Direct link to TCP/IP 4 계층" title="Direct link to TCP/IP 4 계층">​</a></h3><p><code>Application</code> : osi의 application, presentation, session을 합친 계층, http, telnet, dns, dhcp 프로토콜이 있음</p><p><code>Transport</code> : TCP,UDP 프로토콜이 있음</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+ 포트번호를 통해서 Application 어디로 보낼지 담겨있음</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>Internet</code> : OSI의 network 계층, ICMP, IP, ARP RARP 있다. </p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+ protocol Number 를 통해서 TCP,UDP.. 등 어디로 넘기지 담겨있음</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>network access</code> : OSI의 datalink, physical 계층 ethernet2(MAC) </p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+ Type(IPv4, IPv6)이 인터넷 계층 프로토콜 어디로 보낼지 구분해줌 </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" alt="Alt text" src="/assets/images/image-ea1d25911494818bbe3029eedad2b1bd.png" width="1874" height="690" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="포트번호">포트번호<a href="#포트번호" class="hash-link" aria-label="Direct link to 포트번호" title="Direct link to 포트번호">​</a></h3><p><code>0 ~ 1023</code> : 잘 알려진 서비스 예약 포트</p><p><code>1024 ~ 49151</code> : 추가 표준 상용 tool 예약 포트</p><p><code>49152 ~ 65535</code> : 개인용 포트</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p><a href="https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml" target="_blank" rel="noopener noreferrer">도움이 되는 다양한 정보들이 담긴 url 1</a><br>
<a href="https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml" target="_blank" rel="noopener noreferrer">도움이 되는 다양한 정보들이 담긴 url 2</a></p></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="네트워크-연결-장치">네트워크 연결 장치<a href="#네트워크-연결-장치" class="hash-link" aria-label="Direct link to 네트워크 연결 장치" title="Direct link to 네트워크 연결 장치">​</a></h3><ol><li>HUB</li></ol><p>허브는 다 확인해보고 해당 목적지인지 검사하고 아니면 다음 목적지로.. 반복</p><ol start="2"><li>Switch</li></ol><p>스위치는 목적지 주소가 포함되어 있어서 해당 목적지에만 방문 근데 FFFF가 목적지 주소이면 브로드캐스트 인데 모든 스위치에 전달(Flooding)하기 때문에 네트워크 부하가 옴 &gt; 차단의 필요성이 있다.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>스위치 동작</div><div class="admonitionContent_S0QG"><ol><li>Flooding</li></ol><p>들어온 포트를 제외하고 모든 포트에 뿌림</p><ol start="2"><li>Learning</li></ol><p>맥주소를 학습해서 맥 테이블에 작성</p><ol start="3"><li>Forwarding</li></ol><p>목적지 맥주소에 그대로 프레임 보내는 것</p><ol start="4"><li>Filtering</li></ol><p>목적지 주소를 알고 있을 때 프레임 전송을 막는 것</p></div></div><ol start="3"><li>Router</li></ol><p>라우터는 네트워크 별로 전송 차단할 수 있음. 브로드캐스트로 인한 네트워크 부하 방지</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tcp와-udp">TCP와 UDP<a href="#tcp와-udp" class="hash-link" aria-label="Direct link to TCP와 UDP" title="Direct link to TCP와 UDP">​</a></h3><p><code>TCP</code> : 헤더(20 ~ 60byte)</p><p>A &gt;&gt; 확인신호 &gt;&gt; B</p><p>B &gt;&gt; 응답 &gt;&gt; A</p><p>A &gt;&gt; 연결 확정 &gt;&gt; B</p><p>A &gt;&gt; 데이터 전달 &gt;&gt; B</p><p>B &gt;&gt; 응답 &gt;&gt; A</p><p><code>UDP</code> : 헤더 (8byte)</p><p>A &gt;&gt; 데이터 전달 &gt;&gt; B</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="wireshark">wireshark<a href="#wireshark" class="hash-link" aria-label="Direct link to wireshark" title="Direct link to wireshark">​</a></h2><hr><p>와이어샤크는 마지막 상태 설정이 저장된다.</p><p>캡처 옵션에서 모두 무작위를 끄면 나한테 들어오는 패킷만 확인할 수 있다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="숨김">숨김<a href="#숨김" class="hash-link" aria-label="Direct link to 숨김" title="Direct link to 숨김">​</a></h3><p>캡처 &gt; 옵션 &gt; 인터페이스관리에서 표시를 체크 해제하면 인터페이스를 숨길 수 있다.</p><p>아니면 네트워크 설정에서 어댑터 사용안하면 안보임</p><p>아니면 라이브러리(npcap)가 삭제됐을 수도 있음.</p><p>아니면 가상 인터페이스를 추가하고 재부팅해야 보임</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="통계">통계<a href="#통계" class="hash-link" aria-label="Direct link to 통계" title="Direct link to 통계">​</a></h3><p>필터에 <code>tcp.stream == 1</code> 등으로 필터링 후</p><p>통계 &gt; 플로 그래프 &gt; 표시 필터로 제한</p><p><img loading="lazy" alt="Alt text" src="/assets/images/image-1-10d5c9680a1759b0c45738c20c4c7bc5.png" width="1243" height="360" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="스트림-확인">스트림 확인<a href="#스트림-확인" class="hash-link" aria-label="Direct link to 스트림 확인" title="Direct link to 스트림 확인">​</a></h3><p>패킷에 우클릭 &gt; 따라가기 &gt; TCP 스트림 등..</p><p>한 눈에 보인다.</p><p>TCP는 최대 길이가 1514여서 잘려서 분석하기 어려울 수 있는데 한 눈에 확인 가능</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="KOSTA" term="KOSTA"/>
        <category label="와이어샤크" term="와이어샤크"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[와이어샤크]]></title>
        <id>https://kihyun1998.github.io/blog/와이어샤크</id>
        <link href="https://kihyun1998.github.io/blog/와이어샤크"/>
        <updated>2023-11-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="와이어샤크-설치">와이어샤크 설치<a href="#와이어샤크-설치" class="hash-link" aria-label="Direct link to 와이어샤크 설치" title="Direct link to 와이어샤크 설치">​</a></h2><hr><p><a href="https://www.wireshark.org/" target="_blank" rel="noopener noreferrer">이곳</a>에서 진행할 수 있습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="컴퓨터-네트워크">컴퓨터 네트워크<a href="#컴퓨터-네트워크" class="hash-link" aria-label="Direct link to 컴퓨터 네트워크" title="Direct link to 컴퓨터 네트워크">​</a></h2><hr><p>데이터 통신은 MAC주소가 꼭 필요함. 이걸 논리적으로 바꾼 주소가 IP주소</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="물리주소-확인">물리주소 확인<a href="#물리주소-확인" class="hash-link" aria-label="Direct link to 물리주소 확인" title="Direct link to 물리주소 확인">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">arp </span><span class="token parameter variable" style="color:#36acaa">-a</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>캐시 데이터다. 5분뒤에 지어짐 근데 지우려면</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">apr </span><span class="token parameter variable" style="color:#36acaa">-d</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>캐시가 남는경우는 내가 상대방과 연결을 할 때도 있지만 상대방이 나와 연결할 때도 캐시가 남음.</p><p>그래서 패킷 분석할 때 캐시를 지워야 한다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="dns가-알려준-ip-캐시-정보-확인">dns가 알려준 ip 캐시 정보 확인<a href="#dns가-알려준-ip-캐시-정보-확인" class="hash-link" aria-label="Direct link to dns가 알려준 ip 캐시 정보 확인" title="Direct link to dns가 알려준 ip 캐시 정보 확인">​</a></h3><hr><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ipconfig/displaydns</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>지우기</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ipconfig/flushdns</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="컴퓨터-이름으로-통신">컴퓨터 이름으로 통신<a href="#컴퓨터-이름으로-통신" class="hash-link" aria-label="Direct link to 컴퓨터 이름으로 통신" title="Direct link to 컴퓨터 이름으로 통신">​</a></h3><hr><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">nbtstat </span><span class="token parameter variable" style="color:#36acaa">-n</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>캐시 확인</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">nbtstat </span><span class="token parameter variable" style="color:#36acaa">-c</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>캐시 삭제</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">nbtstat </span><span class="token parameter variable" style="color:#36acaa">-R</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>분석할 때 arp, dns, nbtstat 캐시 지워주고 하는게 좋다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="osi-7-계층">OSI 7 계층<a href="#osi-7-계층" class="hash-link" aria-label="Direct link to OSI 7 계층" title="Direct link to OSI 7 계층">​</a></h3><p>계층을 통과할 때는 관련 헤더가 추가된다. PDU가 있다.</p><p>PDU는 아래 정리..</p><p><code>Presentation</code> : Message</p><p><code>Transport</code> : Segment</p><p><code>Network</code> : packet</p><p><code>Datalink</code> : frame</p><hr><p><code>Application</code> : 통신 software</p><p><code>Presentation</code> : 데이터 포맷 정의 (jpg,png 등)</p><p><code>Session</code> : App 연결 유지 or 해제</p><p><code>Transport</code> : 패킷 분리, 재전송, 에러 검출 (Segment가 전송 최소단위여서)</p><p><code>Network</code> : Segment앞에 논리적 주소(IP)를 추가해서 목적 전달 가능하게 해줌 &gt; Packet</p><p><code>Datalink</code> : 물리 주소를 추가해서 전달(MAC,DLCI) &gt; Frame</p><p><code>Pyhsical</code> : bit를 전기신호로 변환, 전기적, 기능적 특성, 절차적 특성, 기계적 특성에 대한 약속</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tcpip-4-계층">TCP/IP 4 계층<a href="#tcpip-4-계층" class="hash-link" aria-label="Direct link to TCP/IP 4 계층" title="Direct link to TCP/IP 4 계층">​</a></h3><p><code>Application</code> : osi의 application, presentation, session을 합친 계층, http, telnet, dns, dhcp 프로토콜이 있음</p><p><code>Transport</code> : TCP,UDP 프로토콜이 있음</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+ 포트번호를 통해서 Application 어디로 보낼지 담겨있음</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>Internet</code> : OSI의 network 계층, ICMP, IP, ARP RARP 있다. </p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+ protocol Number 를 통해서 TCP,UDP.. 등 어디로 넘기지 담겨있음</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>network access</code> : OSI의 datalink, physical 계층 ethernet2(MAC) </p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+ Type(IPv4, IPv6)이 인터넷 계층 프로토콜 어디로 보낼지 구분해줌 </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" alt="Alt text" src="/assets/images/image-ea1d25911494818bbe3029eedad2b1bd.png" width="1874" height="690" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="포트번호">포트번호<a href="#포트번호" class="hash-link" aria-label="Direct link to 포트번호" title="Direct link to 포트번호">​</a></h3><p><code>0 ~ 1023</code> : 잘 알려진 서비스 예약 포트</p><p><code>1024 ~ 49151</code> : 추가 표준 상용 tool 예약 포트</p><p><code>49152 ~ 65535</code> : 개인용 포트</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p><a href="https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml" target="_blank" rel="noopener noreferrer">도움이 되는 다양한 정보들이 담긴 url 1</a><br>
<a href="https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml" target="_blank" rel="noopener noreferrer">도움이 되는 다양한 정보들이 담긴 url 2</a></p></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="네트워크-연결-장치">네트워크 연결 장치<a href="#네트워크-연결-장치" class="hash-link" aria-label="Direct link to 네트워크 연결 장치" title="Direct link to 네트워크 연결 장치">​</a></h3><ol><li>HUB</li></ol><p>허브는 다 확인해보고 해당 목적지인지 검사하고 아니면 다음 목적지로.. 반복</p><ol start="2"><li>Switch</li></ol><p>스위치는 목적지 주소가 포함되어 있어서 해당 목적지에만 방문 근데 FFFF가 목적지 주소이면 브로드캐스트 인데 모든 스위치에 전달(Flooding)하기 때문에 네트워크 부하가 옴 &gt; 차단의 필요성이 있다.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>스위치 동작</div><div class="admonitionContent_S0QG"><ol><li>Flooding</li></ol><p>들어온 포트를 제외하고 모든 포트에 뿌림</p><ol start="2"><li>Learning</li></ol><p>맥주소를 학습해서 맥 테이블에 작성</p><ol start="3"><li>Forwarding</li></ol><p>목적지 맥주소에 그대로 프레임 보내는 것</p><ol start="4"><li>Filtering</li></ol><p>목적지 주소를 알고 있을 때 프레임 전송을 막는 것</p></div></div><ol start="3"><li>Router</li></ol><p>라우터는 네트워크 별로 전송 차단할 수 있음. 브로드캐스트로 인한 네트워크 부하 방지</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tcp와-udp">TCP와 UDP<a href="#tcp와-udp" class="hash-link" aria-label="Direct link to TCP와 UDP" title="Direct link to TCP와 UDP">​</a></h3><p><code>TCP</code> : 헤더(20 ~ 60byte)</p><p>A &gt;&gt; 확인신호 &gt;&gt; B</p><p>B &gt;&gt; 응답 &gt;&gt; A</p><p>A &gt;&gt; 연결 확정 &gt;&gt; B</p><p>A &gt;&gt; 데이터 전달 &gt;&gt; B</p><p>B &gt;&gt; 응답 &gt;&gt; A</p><p><code>UDP</code> : 헤더 (8byte)</p><p>A &gt;&gt; 데이터 전달 &gt;&gt; B</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="wireshark">wireshark<a href="#wireshark" class="hash-link" aria-label="Direct link to wireshark" title="Direct link to wireshark">​</a></h2><hr><p>와이어샤크는 마지막 상태 설정이 저장된다.</p><p>캡처 옵션에서 모두 무작위를 끄면 나한테 들어오는 패킷만 확인할 수 있다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="숨김">숨김<a href="#숨김" class="hash-link" aria-label="Direct link to 숨김" title="Direct link to 숨김">​</a></h3><p>캡처 &gt; 옵션 &gt; 인터페이스관리에서 표시를 체크 해제하면 인터페이스를 숨길 수 있다.</p><p>아니면 네트워크 설정에서 어댑터 사용안하면 안보임</p><p>아니면 라이브러리(npcap)가 삭제됐을 수도 있음.</p><p>아니면 가상 인터페이스를 추가하고 재부팅해야 보임</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="통계">통계<a href="#통계" class="hash-link" aria-label="Direct link to 통계" title="Direct link to 통계">​</a></h3><p>필터에 <code>tcp.stream == 1</code> 등으로 필터링 후</p><p>통계 &gt; 플로 그래프 &gt; 표시 필터로 제한</p><p><img loading="lazy" alt="Alt text" src="/assets/images/image-1-10d5c9680a1759b0c45738c20c4c7bc5.png" width="1243" height="360" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="스트림-확인">스트림 확인<a href="#스트림-확인" class="hash-link" aria-label="Direct link to 스트림 확인" title="Direct link to 스트림 확인">​</a></h3><p>패킷에 우클릭 &gt; 따라가기 &gt; TCP 스트림 등..</p><p>한 눈에 보인다.</p><p>TCP는 최대 길이가 1514여서 잘려서 분석하기 어려울 수 있는데 한 눈에 확인 가능</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="KOSTA" term="KOSTA"/>
        <category label="와이어샤크" term="와이어샤크"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[와이어샤크]]></title>
        <id>https://kihyun1998.github.io/blog/와이어샤크</id>
        <link href="https://kihyun1998.github.io/blog/와이어샤크"/>
        <updated>2023-11-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="와이어샤크-설치">와이어샤크 설치<a href="#와이어샤크-설치" class="hash-link" aria-label="Direct link to 와이어샤크 설치" title="Direct link to 와이어샤크 설치">​</a></h2><hr><p><a href="https://www.wireshark.org/" target="_blank" rel="noopener noreferrer">이곳</a>에서 진행할 수 있습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="컴퓨터-네트워크">컴퓨터 네트워크<a href="#컴퓨터-네트워크" class="hash-link" aria-label="Direct link to 컴퓨터 네트워크" title="Direct link to 컴퓨터 네트워크">​</a></h2><hr><p>데이터 통신은 MAC주소가 꼭 필요함. 이걸 논리적으로 바꾼 주소가 IP주소</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="물리주소-확인">물리주소 확인<a href="#물리주소-확인" class="hash-link" aria-label="Direct link to 물리주소 확인" title="Direct link to 물리주소 확인">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">arp </span><span class="token parameter variable" style="color:#36acaa">-a</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>캐시 데이터다. 5분뒤에 지어짐 근데 지우려면</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">apr </span><span class="token parameter variable" style="color:#36acaa">-d</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>캐시가 남는경우는 내가 상대방과 연결을 할 때도 있지만 상대방이 나와 연결할 때도 캐시가 남음.</p><p>그래서 패킷 분석할 때 캐시를 지워야 한다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="dns가-알려준-ip-캐시-정보-확인">dns가 알려준 ip 캐시 정보 확인<a href="#dns가-알려준-ip-캐시-정보-확인" class="hash-link" aria-label="Direct link to dns가 알려준 ip 캐시 정보 확인" title="Direct link to dns가 알려준 ip 캐시 정보 확인">​</a></h3><hr><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ipconfig/displaydns</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>지우기</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ipconfig/flushdns</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="컴퓨터-이름으로-통신">컴퓨터 이름으로 통신<a href="#컴퓨터-이름으로-통신" class="hash-link" aria-label="Direct link to 컴퓨터 이름으로 통신" title="Direct link to 컴퓨터 이름으로 통신">​</a></h3><hr><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">nbtstat </span><span class="token parameter variable" style="color:#36acaa">-n</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>캐시 확인</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">nbtstat </span><span class="token parameter variable" style="color:#36acaa">-c</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>캐시 삭제</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">nbtstat </span><span class="token parameter variable" style="color:#36acaa">-R</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>분석할 때 arp, dns, nbtstat 캐시 지워주고 하는게 좋다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="osi-7-계층">OSI 7 계층<a href="#osi-7-계층" class="hash-link" aria-label="Direct link to OSI 7 계층" title="Direct link to OSI 7 계층">​</a></h3><p>계층을 통과할 때는 관련 헤더가 추가된다. PDU가 있다.</p><p>PDU는 아래 정리..</p><p><code>Presentation</code> : Message</p><p><code>Transport</code> : Segment</p><p><code>Network</code> : packet</p><p><code>Datalink</code> : frame</p><hr><p><code>Application</code> : 통신 software</p><p><code>Presentation</code> : 데이터 포맷 정의 (jpg,png 등)</p><p><code>Session</code> : App 연결 유지 or 해제</p><p><code>Transport</code> : 패킷 분리, 재전송, 에러 검출 (Segment가 전송 최소단위여서)</p><p><code>Network</code> : Segment앞에 논리적 주소(IP)를 추가해서 목적 전달 가능하게 해줌 &gt; Packet</p><p><code>Datalink</code> : 물리 주소를 추가해서 전달(MAC,DLCI) &gt; Frame</p><p><code>Pyhsical</code> : bit를 전기신호로 변환, 전기적, 기능적 특성, 절차적 특성, 기계적 특성에 대한 약속</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tcpip-4-계층">TCP/IP 4 계층<a href="#tcpip-4-계층" class="hash-link" aria-label="Direct link to TCP/IP 4 계층" title="Direct link to TCP/IP 4 계층">​</a></h3><p><code>Application</code> : osi의 application, presentation, session을 합친 계층, http, telnet, dns, dhcp 프로토콜이 있음</p><p><code>Transport</code> : TCP,UDP 프로토콜이 있음</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+ 포트번호를 통해서 Application 어디로 보낼지 담겨있음</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>Internet</code> : OSI의 network 계층, ICMP, IP, ARP RARP 있다. </p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+ protocol Number 를 통해서 TCP,UDP.. 등 어디로 넘기지 담겨있음</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>network access</code> : OSI의 datalink, physical 계층 ethernet2(MAC) </p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+ Type(IPv4, IPv6)이 인터넷 계층 프로토콜 어디로 보낼지 구분해줌 </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" alt="Alt text" src="/assets/images/image-ea1d25911494818bbe3029eedad2b1bd.png" width="1874" height="690" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="포트번호">포트번호<a href="#포트번호" class="hash-link" aria-label="Direct link to 포트번호" title="Direct link to 포트번호">​</a></h3><p><code>0 ~ 1023</code> : 잘 알려진 서비스 예약 포트</p><p><code>1024 ~ 49151</code> : 추가 표준 상용 tool 예약 포트</p><p><code>49152 ~ 65535</code> : 개인용 포트</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p><a href="https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml" target="_blank" rel="noopener noreferrer">도움이 되는 다양한 정보들이 담긴 url 1</a><br>
<a href="https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml" target="_blank" rel="noopener noreferrer">도움이 되는 다양한 정보들이 담긴 url 2</a></p></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="네트워크-연결-장치">네트워크 연결 장치<a href="#네트워크-연결-장치" class="hash-link" aria-label="Direct link to 네트워크 연결 장치" title="Direct link to 네트워크 연결 장치">​</a></h3><ol><li>HUB</li></ol><p>허브는 다 확인해보고 해당 목적지인지 검사하고 아니면 다음 목적지로.. 반복</p><ol start="2"><li>Switch</li></ol><p>스위치는 목적지 주소가 포함되어 있어서 해당 목적지에만 방문 근데 FFFF가 목적지 주소이면 브로드캐스트 인데 모든 스위치에 전달(Flooding)하기 때문에 네트워크 부하가 옴 &gt; 차단의 필요성이 있다.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>스위치 동작</div><div class="admonitionContent_S0QG"><ol><li>Flooding</li></ol><p>들어온 포트를 제외하고 모든 포트에 뿌림</p><ol start="2"><li>Learning</li></ol><p>맥주소를 학습해서 맥 테이블에 작성</p><ol start="3"><li>Forwarding</li></ol><p>목적지 맥주소에 그대로 프레임 보내는 것</p><ol start="4"><li>Filtering</li></ol><p>목적지 주소를 알고 있을 때 프레임 전송을 막는 것</p></div></div><ol start="3"><li>Router</li></ol><p>라우터는 네트워크 별로 전송 차단할 수 있음. 브로드캐스트로 인한 네트워크 부하 방지</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tcp와-udp">TCP와 UDP<a href="#tcp와-udp" class="hash-link" aria-label="Direct link to TCP와 UDP" title="Direct link to TCP와 UDP">​</a></h3><p><code>TCP</code> : 헤더(20 ~ 60byte)</p><p>A &gt;&gt; 확인신호 &gt;&gt; B</p><p>B &gt;&gt; 응답 &gt;&gt; A</p><p>A &gt;&gt; 연결 확정 &gt;&gt; B</p><p>A &gt;&gt; 데이터 전달 &gt;&gt; B</p><p>B &gt;&gt; 응답 &gt;&gt; A</p><p><code>UDP</code> : 헤더 (8byte)</p><p>A &gt;&gt; 데이터 전달 &gt;&gt; B</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="wireshark">wireshark<a href="#wireshark" class="hash-link" aria-label="Direct link to wireshark" title="Direct link to wireshark">​</a></h2><hr><p>와이어샤크는 마지막 상태 설정이 저장된다.</p><p>캡처 옵션에서 모두 무작위를 끄면 나한테 들어오는 패킷만 확인할 수 있다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="숨김">숨김<a href="#숨김" class="hash-link" aria-label="Direct link to 숨김" title="Direct link to 숨김">​</a></h3><p>캡처 &gt; 옵션 &gt; 인터페이스관리에서 표시를 체크 해제하면 인터페이스를 숨길 수 있다.</p><p>아니면 네트워크 설정에서 어댑터 사용안하면 안보임</p><p>아니면 라이브러리(npcap)가 삭제됐을 수도 있음.</p><p>아니면 가상 인터페이스를 추가하고 재부팅해야 보임</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="통계">통계<a href="#통계" class="hash-link" aria-label="Direct link to 통계" title="Direct link to 통계">​</a></h3><p>필터에 <code>tcp.stream == 1</code> 등으로 필터링 후</p><p>통계 &gt; 플로 그래프 &gt; 표시 필터로 제한</p><p><img loading="lazy" alt="Alt text" src="/assets/images/image-1-10d5c9680a1759b0c45738c20c4c7bc5.png" width="1243" height="360" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="스트림-확인">스트림 확인<a href="#스트림-확인" class="hash-link" aria-label="Direct link to 스트림 확인" title="Direct link to 스트림 확인">​</a></h3><p>패킷에 우클릭 &gt; 따라가기 &gt; TCP 스트림 등..</p><p>한 눈에 보인다.</p><p>TCP는 최대 길이가 1514여서 잘려서 분석하기 어려울 수 있는데 한 눈에 확인 가능</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="KOSTA" term="KOSTA"/>
        <category label="와이어샤크" term="와이어샤크"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[PKI 개념]]></title>
        <id>https://kihyun1998.github.io/blog/PKI</id>
        <link href="https://kihyun1998.github.io/blog/PKI"/>
        <updated>2023-10-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[PKI란 Public Key Infrastructure의 약자로 공개키 암호화와 전자서명을 사용할 수 있게 기반을 마련해둔 것이라고 합니다.]]></summary>
        <content type="html"><![CDATA[<p>PKI란 Public Key Infrastructure의 약자로 공개키 암호화와 전자서명을 사용할 수 있게 기반을 마련해둔 것이라고 합니다.</p><p>신뢰기간이 공개키들을 인증해주면 그 공개키에 대응되는 개인키도 인증되기 때문에 개인키를 갖고 있는 개인이 인증을 받습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="은행에서-공인인증서-인증-과정">은행에서 공인인증서 인증 과정<a href="#은행에서-공인인증서-인증-과정" class="hash-link" aria-label="Direct link to 은행에서 공인인증서 인증 과정" title="Direct link to 은행에서 공인인증서 인증 과정">​</a></h2><hr><p>은행에서 공인인증서 과정를 인증하는 과정이 있습니다.</p><p><img loading="lazy" alt="Alt text" src="/assets/images/image-7799d4c68bff034a323839a9543d9ea5.png" width="649" height="452" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="생성-과정">생성 과정<a href="#생성-과정" class="hash-link" aria-label="Direct link to 생성 과정" title="Direct link to 생성 과정">​</a></h3><ol><li><p>먼저 개인이 공인 인증서 발급을 CA에 요청합니다.</p></li><li><p>그러면 CA에서 개인의 개인키, 공개키를 생성합니다.</p></li><li><p>생성한 키들로 디지털 인증서를 발급합니다.</p></li></ol><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>디지털 인증서에 들어가는 것</div><div class="admonitionContent_S0QG"><p><code>발급자 정보</code>,  <code>소유자 정보</code>, <code>인증서 권한</code>, <code>유효기간</code>, <code>발급자 전자 서명</code>, <code>일련번호</code>, <code>소유자 공개키 정보</code></p></div></div><ol start="4"><li>디지털 서명 생성을 생성합니다.</li></ol><p>디지털 서명은 전송할 문서를 인증해주는 도구입니다.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>디지털 서명 생성 절차</div><div class="admonitionContent_S0QG"><ol><li>메시지 or 문서 선택</li><li>메시지 or 문서에 해시 함수 적용 &gt; <code>해시 값</code></li><li>사용자의 개인키로 <code>해시 값</code> 암호화 &gt; <code>디지털 서명</code></li></ol></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="확인-과정">확인 과정<a href="#확인-과정" class="hash-link" aria-label="Direct link to 확인 과정" title="Direct link to 확인 과정">​</a></h3><ol><li><p><code>원본 메시지</code>와 <code>디지털 서명</code>을 받습니다.</p></li><li><p>디지털 인증서에서 추출한 공개키로 <code>디지털 서명</code>을 복호화합니다. &gt; <code>해시 값</code></p></li><li><p><code>원본 메시지</code> 해시해보며 복호화한 <code>해시 값</code>과 동일한지 확인하여 무결성 검사를 합니다.</p></li><li><p>디지털 인증서의 유효기간을 확인합니다.</p></li></ol><p>그러면 PKI 인증이 됩니다. 여기서 은행과 통신하고 싶다면 메시지 또는 문서가 은행의 인증서가 되겠네요.</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="pki" term="pki"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Overloading & Overriding]]></title>
        <id>https://kihyun1998.github.io/blog/Overloading and Overriding</id>
        <link href="https://kihyun1998.github.io/blog/Overloading and Overriding"/>
        <updated>2023-09-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[오버로딩과 오버라이딩에 대해서 알아보겠습니다.]]></summary>
        <content type="html"><![CDATA[<p>오버로딩과 오버라이딩에 대해서 알아보겠습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="오버로딩-overloading">오버로딩 (Overloading)<a href="#오버로딩-overloading" class="hash-link" aria-label="Direct link to 오버로딩 (Overloading)" title="Direct link to 오버로딩 (Overloading)">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="정의">정의<a href="#정의" class="hash-link" aria-label="Direct link to 정의" title="Direct link to 정의">​</a></h3><p>한 클래스 내에 이미 <strong>사용하려는 이름</strong>과 <strong>같은 이름</strong>을 가진 <strong><code>메소드</code></strong>가 있어도 매개 변수의 개수와 타입이 다르면 같은 이름을 사용해서 메소드를 재정의 할 수 있다.</p><p>여기서 핵심은 2가지로 정리할 수 있습니다.</p><ol><li>메소드의 이름이 같다.</li><li>매개변수의 개수나 타입이 달라야 한다.</li><li>리턴값과는 상관 없습니다.</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="오버로딩-함수-코드">오버로딩 함수 코드<a href="#오버로딩-함수-코드" class="hash-link" aria-label="Direct link to 오버로딩 함수 코드" title="Direct link to 오버로딩 함수 코드">​</a></h3><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">오버로딩 함수</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">OverringClass</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 오버로딩 1번 함수</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token class-name">OverloadMethod</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"============================"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"매개변수 수 : 0개"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"매개변수 타입 : void"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"오버라이딩 1번 함수 입니다."</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"============================"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 오버로딩 2번 함수</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token class-name">OverloadMethod</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"============================"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"매개변수 수 : 2개"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"매개변수 타입 : int"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"오버라이딩 2번 함수 입니다. 덧셈 값을 반환합니다."</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"============================"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> a</span><span class="token operator" style="color:#393A34">+</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 오버로딩 3번 함수</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token class-name">OverloadMethod</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> b</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> c</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"============================"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"매개변수 수 : 3개"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"매개변수 타입 : int"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"오버라이딩 3번 함수 입니다. 곱셈을 반환합니다."</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"============================"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> a</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">b</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">c</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 오버로딩 4번 함수</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">boolean</span><span class="token plain"> </span><span class="token class-name">OverloadMethod</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">String</span><span class="token plain"> str</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"============================"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"매개변수 수 : 1개"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"매개변수 타입 : String"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"오버라이딩 4번 함수 입니다. 이름이 park이면 true를 반환합니다."</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"============================"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">str</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">equals</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"park"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token keyword" style="color:#00009f">else</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위 함수들을 보시면 <code>OverloadMethod</code>로 이름들이 같지만 타입과 매개변수의 수가 다른 것들을 보실 수 있습니다. 함수들에 대한 설명은 코드에 작성돼 있으니 참고해주세요~ 😎</p><p>코드를 실행하는 코드와 결과를 확인해보겠습니다.</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">결과 확인 코드</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Main</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">OverringClass</span><span class="token plain"> oc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">OverringClass</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 오버로딩 1번 함수</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name namespace" style="opacity:0.7">oc</span><span class="token class-name namespace punctuation" style="opacity:0.7;color:#393A34">.</span><span class="token class-name">OverloadMethod</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 오버로딩 2번 함수</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name namespace" style="opacity:0.7">oc</span><span class="token class-name namespace punctuation" style="opacity:0.7;color:#393A34">.</span><span class="token class-name">OverloadMethod</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"오버로딩 2번 함수 반환값 : "</span><span class="token operator" style="color:#393A34">+</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 오버로딩 3번 함수</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> b </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name namespace" style="opacity:0.7">oc</span><span class="token class-name namespace punctuation" style="opacity:0.7;color:#393A34">.</span><span class="token class-name">OverloadMethod</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"오버로딩 3번 함수 반환값 : "</span><span class="token operator" style="color:#393A34">+</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 오버로딩 4번 함수</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">boolean</span><span class="token plain"> c </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name namespace" style="opacity:0.7">oc</span><span class="token class-name namespace punctuation" style="opacity:0.7;color:#393A34">.</span><span class="token class-name">OverloadMethod</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"park"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"오버로딩 4번 함수 반환값 : "</span><span class="token operator" style="color:#393A34">+</span><span class="token plain">c</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">결과</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">============================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">매개변수 수 : 0개</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">매개변수 타입 : void</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">오버라이딩 1번 함수 입니다.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">============================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">============================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">매개변수 수 : 2개</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">매개변수 타입 : int</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">오버라이딩 2번 함수 입니다. 덧셈 값을 반환합니다.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">============================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">오버로딩 2번 함수 반환값 : 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">============================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">매개변수 수 : 3개</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">매개변수 타입 : int</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">오버라이딩 3번 함수 입니다. 곱셈을 반환합니다.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">============================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">오버로딩 3번 함수 반환값 : 120</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">============================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">매개변수 수 : 1개</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">매개변수 타입 : String</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">오버라이딩 4번 함수 입니다. 이름이 park이면 true를 반환합니다.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">============================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">오버로딩 4번 함수 반환값 : true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="Overriding" term="Overriding"/>
        <category label="Overloading" term="Overloading"/>
        <category label="오버로딩" term="오버로딩"/>
        <category label="오버라이딩" term="오버라이딩"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[[SOLID] 객체 지향 프로그래밍(OOP) 원칙]]></title>
        <id>https://kihyun1998.github.io/blog/design pattern rule</id>
        <link href="https://kihyun1998.github.io/blog/design pattern rule"/>
        <updated>2023-08-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[SRP ( 단일 책임의 원칙 : Single Responsibility Principle )]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="srp--단일-책임의-원칙--single-responsibility-principle-">SRP ( 단일 책임의 원칙 : Single Responsibility Principle )<a href="#srp--단일-책임의-원칙--single-responsibility-principle-" class="hash-link" aria-label="Direct link to SRP ( 단일 책임의 원칙 : Single Responsibility Principle )" title="Direct link to SRP ( 단일 책임의 원칙 : Single Responsibility Principle )">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ocp--계방-폐쇄의-원칙--open-close-principle-">OCP ( 계방-폐쇄의 원칙 : Open Close Principle )<a href="#ocp--계방-폐쇄의-원칙--open-close-principle-" class="hash-link" aria-label="Direct link to OCP ( 계방-폐쇄의 원칙 : Open Close Principle )" title="Direct link to OCP ( 계방-폐쇄의 원칙 : Open Close Principle )">​</a></h2><ol><li><p>바뀌는 부분을 캡슐화한다.</p><ul><li>변하는(확장되는) 것과 변하지 않을 것을 구분</li></ul></li><li><p>상속보다는 구성을 활용한다.</p></li><li><p>구현보다는 인터페이스에 맞춰서 프로그래밍한다.</p><ul><li>정의한 인터페이스에 의존</li></ul></li><li><p>상호작용하는 객체 사이에서는 가능하면 느슨한 결합을 사용해야 한다.</p></li><li><p>클래스는 확장에는 열려있어야 하고 변경에는 닫혀 있어야 한다.</p></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="lsp--리스코프-치환의-원칙--the-liskov-substitution-principle-">LSP ( 리스코프 치환의 원칙 : The LisKov Substitution Principle )<a href="#lsp--리스코프-치환의-원칙--the-liskov-substitution-principle-" class="hash-link" aria-label="Direct link to LSP ( 리스코프 치환의 원칙 : The LisKov Substitution Principle )" title="Direct link to LSP ( 리스코프 치환의 원칙 : The LisKov Substitution Principle )">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="isp--인터페이스-분리의-원칙--interface-segregation-principle-">ISP ( 인터페이스 분리의 원칙 : Interface Segregation Principle )<a href="#isp--인터페이스-분리의-원칙--interface-segregation-principle-" class="hash-link" aria-label="Direct link to ISP ( 인터페이스 분리의 원칙 : Interface Segregation Principle )" title="Direct link to ISP ( 인터페이스 분리의 원칙 : Interface Segregation Principle )">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dip--의존성-역전의-원칙--dependency-inversion-principle-">DIP ( 의존성 역전의 원칙 : Dependency Inversion Principle )<a href="#dip--의존성-역전의-원칙--dependency-inversion-principle-" class="hash-link" aria-label="Direct link to DIP ( 의존성 역전의 원칙 : Dependency Inversion Principle )" title="Direct link to DIP ( 의존성 역전의 원칙 : Dependency Inversion Principle )">​</a></h2><ol><li><p>추상화된 것에 의존하게 만들고 구상 클래스에 의존하지 않게 만든다.</p></li><li><p>고수준 구성 요소가 저수준 구성 요소에 의존하면 안되고 항상 추상화에 의존하게 만들어야 한다.
<code>고수준 구성 요소</code> : 다른 <code>저수준 구성 요소</code>에 의해 정의되는 행동이 들어있는 구성 요소</p></li><li><p>변수에 구상 클래스의 레퍼런스를 저장하지 않는다.</p></li><li><p>구상 클래스에서 유도된 클래스를 만들지 않는다.</p></li><li><p>베이스 클래스에 이미 구현되어 있는 메소드를 오버라이드하지 않는다.</p></li></ol>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="design pattern" term="design pattern"/>
        <category label="rule" term="rule"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[전략 패턴 - Strategy pattern]]></title>
        <id>https://kihyun1998.github.io/blog/strategy pattern</id>
        <link href="https://kihyun1998.github.io/blog/strategy pattern"/>
        <updated>2023-08-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[정의]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="정의">정의<a href="#정의" class="hash-link" aria-label="Direct link to 정의" title="Direct link to 정의">​</a></h2><p>알고리즘군을 정의하고 캡슐화해서 각각의 알고리즘군을 수정해서 쓸 수 있게 해준다.
전략 패턴을 사용하면 클라이언트로부터 알고리즘을 분리해서 독립적으로 변경할 수 있다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="특징">특징<a href="#특징" class="hash-link" aria-label="Direct link to 특징" title="Direct link to 특징">​</a></h2><ul><li>함수 중 변하는 코드를 class로 구현하여 상속받는 것이 아닌 interface로 구현하여서 Composition하는게 좋다.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="예시">예시<a href="#예시" class="hash-link" aria-label="Direct link to 예시" title="Direct link to 예시">​</a></h2><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">/src/interfaces/FlyBehavior.java</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token class-name">FlyBehavor</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">fly</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위 처럼 나는 행동 인터페이스를 구현하고</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">/src/classes/Duck.java</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">abstract</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Duck</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">FlyBehavor</span><span class="token plain"> flyBehavor</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">setFlyBehavor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">FlyBehavor</span><span class="token plain"> flyBehavor</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">flyBehavor </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> flyBehavor</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>추상 클래스에선 interface 선언 및 setter를 구현하고</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">/src/classes/FlyNoway ... FlyWithWings.java</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">FlyNoWay</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">implements</span><span class="token plain"> </span><span class="token class-name">FlyBehavor</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">fly</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"I can't fly ! TT"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">FlyRocketPowered</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">implements</span><span class="token plain"> </span><span class="token class-name">FlyBehavor</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">fly</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"ROCKET FLY!!"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">FlyWithWings</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">implements</span><span class="token plain"> </span><span class="token class-name">FlyBehavor</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">fly</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"I can fly!!"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위 코드들처럼 interface를 구현하여서 오버라이딩을 합니다.</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">/src/classes/MallardDuck.java</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">MallardDuck</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">Duck</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token class-name">MallardDuck</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        flyBehavor </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">FlyWithWings</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>생성자에서 새로 구현한 인터페이스로 생성합니다.</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="design pattern" term="design pattern"/>
        <category label="strategy pattern" term="strategy pattern"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcome]]></title>
        <id>https://kihyun1998.github.io/blog/welcome</id>
        <link href="https://kihyun1998.github.io/blog/welcome"/>
        <updated>2023-08-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Docusaurus 첫번째 글이다.]]></summary>
        <content type="html"><![CDATA[<p>Docusaurus 첫번째 글이다.</p><p><img loading="lazy" alt="Docusaurus Plushie" src="/assets/images/docusaurus-plushie-banner-a60f7593abca1e3eef26a9afa244e4fb.jpeg" width="1500" height="500" class="img_ev3q"></p><p>귀여운 공룡 인형이 있다.</p>]]></content>
        <author>
            <name>Park Ki Hyun</name>
            <uri>https://github.com/kihyun1998</uri>
        </author>
        <category label="docusaurus" term="docusaurus"/>
        <category label="first post" term="first post"/>
    </entry>
</feed>