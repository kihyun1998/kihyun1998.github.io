"use strict";(self.webpackChunkblogsaurus=self.webpackChunkblogsaurus||[]).push([[5769],{3905:(n,e,r)=>{r.d(e,{Zo:()=>l,kt:()=>p});var t=r(7294);function o(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function c(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,t)}return r}function u(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?c(Object(r),!0).forEach((function(e){o(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function a(n,e){if(null==n)return{};var r,t,o=function(n,e){if(null==n)return{};var r,t,o={},c=Object.keys(n);for(t=0;t<c.length;t++)r=c[t],e.indexOf(r)>=0||(o[r]=n[r]);return o}(n,e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(n);for(t=0;t<c.length;t++)r=c[t],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(o[r]=n[r])}return o}var s=t.createContext({}),i=function(n){var e=t.useContext(s),r=e;return n&&(r="function"==typeof n?n(e):u(u({},e),n)),r},l=function(n){var e=i(n.components);return t.createElement(s.Provider,{value:e},n.children)},m="mdxType",d={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},k=t.forwardRef((function(n,e){var r=n.components,o=n.mdxType,c=n.originalType,s=n.parentName,l=a(n,["components","mdxType","originalType","parentName"]),m=i(r),k=o,p=m["".concat(s,".").concat(k)]||m[k]||d[k]||c;return r?t.createElement(p,u(u({ref:e},l),{},{components:r})):t.createElement(p,u({ref:e},l))}));function p(n,e){var r=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var c=r.length,u=new Array(c);u[0]=k;var a={};for(var s in e)hasOwnProperty.call(e,s)&&(a[s]=e[s]);a.originalType=n,a[m]="string"==typeof n?n:o,u[1]=a;for(var i=2;i<c;i++)u[i]=r[i];return t.createElement.apply(null,u)}return t.createElement.apply(null,r)}k.displayName="MDXCreateElement"},2873:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>s,contentTitle:()=>u,default:()=>d,frontMatter:()=>c,metadata:()=>a,toc:()=>i});var t=r(7462),o=(r(7294),r(3905));const c={sidebar_position:15},u="15. [BackEnd] transfer api\uc5d0 validator \ud65c\uc6a9",a={unversionedId:"backend-master/backend15",id:"backend-master/backend15",title:"15. [BackEnd] transfer api\uc5d0 validator \ud65c\uc6a9",description:"\ud559\uc2b5 \ubaa9\ud45c",source:"@site/docs/backend-master/backend15.md",sourceDirName:"backend-master",slug:"/backend-master/backend15",permalink:"/docs/backend-master/backend15",draft:!1,tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15},sidebar:"backSidebar",previous:{title:"14. [BackEnd] HTTP API test in golang use Mock DB",permalink:"/docs/backend-master/backend14"}},s={},i=[{value:"\ud559\uc2b5 \ubaa9\ud45c",id:"\ud559\uc2b5-\ubaa9\ud45c",level:2},{value:"transfer api \ucf54\ub4dc",id:"transfer-api-\ucf54\ub4dc",level:2},{value:"currency \uc720\ud6a8\uac12 \uac80\uc0ac",id:"currency-\uc720\ud6a8\uac12-\uac80\uc0ac",level:2},{value:"API \ub4f1\ub85d",id:"api-\ub4f1\ub85d",level:2},{value:"validator \ub4f1\ub85d",id:"validator-\ub4f1\ub85d",level:2},{value:"util/currency.go \uc0dd\uc131",id:"utilcurrencygo-\uc0dd\uc131",level:3},{value:"validator.go \uc0dd\uc131",id:"validatorgo-\uc0dd\uc131",level:3},{value:"gin\uc5d0 \ub4f1\ub85d",id:"gin\uc5d0-\ub4f1\ub85d",level:3},{value:"currency\uc758 validator \ubcc0\uacbd",id:"currency\uc758-validator-\ubcc0\uacbd",level:3},{value:"\uc219\uc81c",id:"\uc219\uc81c",level:2},{value:"\ucf54\ub4dc",id:"\ucf54\ub4dc",level:3}],l={toc:i},m="wrapper";function d(n){let{components:e,...r}=n;return(0,o.kt)(m,(0,t.Z)({},l,r,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"15-backend-transfer-api\uc5d0-validator-\ud65c\uc6a9"},"15. ","[BackEnd]"," transfer api\uc5d0 validator \ud65c\uc6a9"),(0,o.kt)("h2",{id:"\ud559\uc2b5-\ubaa9\ud45c"},"\ud559\uc2b5 \ubaa9\ud45c"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"transfer api \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \ub54c currency\ub3c4 \ube44\uad50\ud560 \uc218 \uc788\ub294 \uc2e4\uc2b5\uc744 \uc9c4\ud589"),(0,o.kt)("h2",{id:"transfer-api-\ucf54\ub4dc"},"transfer api \ucf54\ub4dc"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type transferRequest struct {\n    FromAccountID int64  `json:"from_account_id" binding:"required,min=1"`\n    ToAccountID   int64  `json:"to_account_id" binding:"required,min=1"`\n    Amount        int64  `json:"amount" binding:"required,gt=0"`\n    Currency      string `json:"currency" binding:"required,oneof=USD EUR"`\n}\n\nfunc (server *Server) createTransfer(ctx *gin.Context) {\n    var req transferRequest\n\n    // \uc785\ub825\uac12 \uc720\ud6a8\uc131 \uac80\uc0ac\n    if err := ctx.ShouldBindJSON(&req); err != nil {\n        ctx.JSON(http.StatusBadRequest, errorResponse(err)) // \uc0ac\uc6a9\uc790 \uc5d0\ub7ec\n        return\n    }\n\n    // \uc778\uc790 \uc0dd\uc131\n    arg := db.TransferTxParams{\n        FromAccountID: req.FromAccountID,\n        ToAccountID:   req.ToAccountID,\n        Amount:        req.Amount,\n    }\n\n    // \uc0dd\uc131\n    result, err := server.store.TransferTx(ctx, arg)\n    if err != nil {\n        ctx.JSON(http.StatusInternalServerError, errorResponse(err)) // \uc11c\ubc84 \uc5d0\ub7ec\n        return\n    }\n\n    // \uc131\uacf5 \uc2dc\n    ctx.JSON(http.StatusOK, result)\n}\n')),(0,o.kt)("h2",{id:"currency-\uc720\ud6a8\uac12-\uac80\uc0ac"},"currency \uc720\ud6a8\uac12 \uac80\uc0ac"),(0,o.kt)("hr",null),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func (server *Server) validAccount(ctx *gin.Context, accountID int64, currency string) bool {\n    // \uc544\uc774\ub514 \uc720\ud6a8 \ud655\uc778\n    account, err := server.store.GetAccount(ctx, accountID)\n    if err != nil {\n        if err == sql.ErrNoRows {\n            ctx.JSON(http.StatusNotFound, errorResponse(err)) //ID \uc5c6\uc744 \ub54c 404\n            return false\n        }\n\n        ctx.JSON(http.StatusInternalServerError, errorResponse(err)) // \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc11c\ubc84 \uc5d0\ub7ec\n        return false\n    }\n    if account.Currency != currency {\n        err := fmt.Errorf("[ERR] account [%d] currency mismatch : %s vs %s", accountID, account.Currency, currency)\n        ctx.JSON(http.StatusBadRequest, errorResponse(err))\n        return false\n    }\n    return true\n}\n')),(0,o.kt)("p",null,"\ud574\ub2f9 \ud568\uc218\ub85c \ud574\ub2f9 \uc544\uc774\ub514\uac00 \uc874\uc7ac\ud558\ub294\uc9c0 \uadf8\ub9ac\uace0 \ud574\ub2f9 \uc544\uc774\ub514\uc758 currency\uac00 request currency\uc640 \ub3d9\uc77c\ud55c\uc9c0 \uac80\uc0ac\ud569\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (server *Server) createTransfer(ctx *gin.Context) {\n\n    // \uc785\ub825\uac12 \uc720\ud6a8\uc131 \uac80\uc0ac\n    ...\n    if !server.validAccount(ctx, req.FromAccountID, req.Currency) {\n        return\n    }\n    if !server.validAccount(ctx, req.ToAccountID, req.Currency) {\n        return\n    }\n    ...\n}\n")),(0,o.kt)("h2",{id:"api-\ub4f1\ub85d"},"API \ub4f1\ub85d"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"\uc11c\ubc84\uc5d0 API \ub4f1\ub85d\ud569\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func NewServer(store db.Store) *Server {\n    ...\n    // \uc1a1\uae08\n    router.POST("/transfers", server.createTransfer)\n    ...\n}\n')),(0,o.kt)("p",null,"\uc798 \ub3d9\uc791\ud569\ub2c8\ub2e4."),(0,o.kt)("h2",{id:"validator-\ub4f1\ub85d"},"validator \ub4f1\ub85d"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"\uadf8\ub7ec\ub098 \ud55c\uac00\uc9c0 \ubb38\uc81c\ub294 currency \uc885\ub958\uac00 \ub9ce\uc544\uc9c0\uba74 \uc5b4\ub5bb\uac8c \ub300\uc751\ud558\ub290\ub0d0\ub294 \ubb38\uc81c\uac00 \uc0dd\uae41\ub2c8\ub2e4."),(0,o.kt)("p",null,"\uc774\ub97c \ud574\uacb0\ud558\ub294 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("h3",{id:"utilcurrencygo-\uc0dd\uc131"},"util/currency.go \uc0dd\uc131"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'// is supported currencies\nconst (\n    USD = "USD"\n    EUR = "EUR"\n    KRW = "KRW"\n)\n\nfunc IsSupportedCurrency(currency string) bool {\n    switch currency {\n    case USD, EUR, KRW:\n        return true\n    }\n    return false\n}\n')),(0,o.kt)("p",null,"\uc0c1\uc218\ub85c currency\ub4e4\uc744 \uc815\uc758\ud560 \uc218 \uc788\uace0 ",(0,o.kt)("inlineCode",{parentName:"p"},"IsSupportedCurrency")," \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc11c \uc720\ud6a8\ud55c currency\uc778\uc9c0 \uccb4\ud06c\ud560 \uc218 \uc788\ub2e4."),(0,o.kt)("h3",{id:"validatorgo-\uc0dd\uc131"},"validator.go \uc0dd\uc131"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var validCurrency validator.Func = func(fieldLevel validator.FieldLevel) bool {\n    // FieldLevel.Field()\ub294 reflect value\uc5ec\uc11c interface\ub85c \uac00\uc838\uc634\n    if currency, ok := fieldLevel.Field().Interface().(string); ok {\n        //ok == true\uba74 field\uac00 \ubb38\uc790\uc5f4\uc784\n        return util.IsSupportedCurrency(currency)\n    } else {\n        //ok == false\uba74 field\uac00 \ubb38\uc790\uc5f4\uc774 \uc544\ub2d8\n        return false\n    }\n}\n")),(0,o.kt)("p",null,"\uc704 \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc11c \uba3c\uc800 \uc785\ub825\uac12\uc774 \ubb38\uc790\uc5f4\uc778\uc9c0 \uad6c\ubd84\ud558\uace0 \ubb38\uc790\uc5f4\uc774\ub77c\uba74 \ubc29\uae08 \uc704\uc5d0\uc11c \ub9cc\ub4e0 \uc720\ud6a8\ud55c currency\uc778\uc9c0 \uac80\uc0ac\ud558\ub294 \ud568\uc218\uc5d0 \ub123\uc5b4\uc11c return\ud569\ub2c8\ub2e4."),(0,o.kt)("h3",{id:"gin\uc5d0-\ub4f1\ub85d"},"gin\uc5d0 \ub4f1\ub85d"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func NewServer(store db.Store) *Server {\n    ...\n    // \uc720\ud6a8\uc131 \uac80\uc0ac \ub85c\uc9c1 \ub4f1\ub85d \uacfc\uc815\n    if v, ok := binding.Validator.Engine().(*validator.Validate); ok {\n        v.RegisterValidation("currency", validCurrency)\n    }\n    ...\n}\n')),(0,o.kt)("p",null,"validator \ud328\ud0a4\uc9c0\ub97c \uc774\uc6a9\ud574\uc11c \ub4f1\ub85d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("p",null,"\ubb34\uc5b8\uac00\ub97c \ub354 \ucd94\uac00\ud558\ub77c\uace0 \ud558\uba74 \uc544\ub798\ucc98\ub7fc v10\uc744 \uc0ac\uc6a9\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'"github.com/go-playground/validator/v10"\n')),(0,o.kt)("h3",{id:"currency\uc758-validator-\ubcc0\uacbd"},"currency\uc758 validator \ubcc0\uacbd"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'Currency      string `json:"currency" binding:"required,currency"`\n')),(0,o.kt)("p",null,"\uc704\ucc98\ub7fc ",(0,o.kt)("inlineCode",{parentName:"p"},"oneof"),"\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uadf8\ub0e5 ",(0,o.kt)("inlineCode",{parentName:"p"},"currency"),"\ub97c \uc0ac\uc6a9\ud558\uba74 \ub429\ub2c8\ub2e4."),(0,o.kt)("h2",{id:"\uc219\uc81c"},"\uc219\uc81c"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"transfer api \ud14c\uc2a4\ud2b8\ucf54\ub4dc \uc791\uc131\ud558\uae30"),(0,o.kt)("h3",{id:"\ucf54\ub4dc"},"\ucf54\ub4dc"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func TestCreateTransfer(t *testing.T) {\n    amount := int64(100)\n    fromAccount := randomAccount()\n    toAccount := randomAccount()\n    krwAccount := randomAccount()\n\n    fromAccount.Currency = util.USD\n    toAccount.Currency = util.USD\n    krwAccount.Currency = util.KRW\n\n    testCases := []struct {\n        name          string\n        body          gin.H\n        buildStubs    func(store *mockdb.MockStore)\n        checkResponse func(recoder *httptest.ResponseRecorder)\n    }{\n        {\n            name: "OK",\n            body: gin.H{\n                "from_account_id": fromAccount.ID,\n                "to_account_id":   toAccount.ID,\n                "amount":          amount,\n                "currency":        util.USD,\n            },\n            buildStubs: func(store *mockdb.MockStore) {\n                //\uacc4\uc815 \uc720\ud6a8\uc131 \uac80\uc0ac\n                store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(fromAccount.ID)).Times(1).Return(fromAccount, nil)\n                store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(toAccount.ID)).Times(1).Return(toAccount, nil)\n\n                arg := db.TransferTxParams{\n                    FromAccountID: fromAccount.ID,\n                    ToAccountID:   toAccount.ID,\n                    Amount:        amount,\n                }\n                store.EXPECT().TransferTx(gomock.Any(), gomock.Eq(arg)).Times(1)\n            },\n            checkResponse: func(recoder *httptest.ResponseRecorder) {\n                require.Equal(t, http.StatusOK, recoder.Code)\n            },\n        }, {\n            name: "NotFoundFromAccount",\n            body: gin.H{\n                "from_account_id": fromAccount.ID,\n                "to_account_id":   toAccount.ID,\n                "amount":          amount,\n                "currency":        util.USD,\n            },\n            buildStubs: func(store *mockdb.MockStore) {\n                //\uacc4\uc815 \uc720\ud6a8\uc131 \uac80\uc0ac\n                store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(fromAccount.ID)).Times(1).Return(db.Account{}, sql.ErrNoRows)\n                store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(toAccount.ID)).Times(0)\n                arg := db.TransferTxParams{\n                    FromAccountID: fromAccount.ID,\n                    ToAccountID:   toAccount.ID,\n                    Amount:        amount,\n                }\n                store.EXPECT().TransferTx(gomock.Any(), gomock.Eq(arg)).Times(0)\n            },\n            checkResponse: func(recoder *httptest.ResponseRecorder) {\n                require.Equal(t, http.StatusNotFound, recoder.Code)\n            },\n        }, {\n            name: "NotFoundToAccount",\n            body: gin.H{\n                "from_account_id": fromAccount.ID,\n                "to_account_id":   toAccount.ID,\n                "amount":          amount,\n                "currency":        util.USD,\n            },\n            buildStubs: func(store *mockdb.MockStore) {\n                //\uacc4\uc815 \uc720\ud6a8\uc131 \uac80\uc0ac\n                store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(fromAccount.ID)).Times(1).Return(fromAccount, nil)\n                store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(toAccount.ID)).Times(1).Return(db.Account{}, sql.ErrNoRows)\n\n                arg := db.TransferTxParams{\n                    FromAccountID: fromAccount.ID,\n                    ToAccountID:   toAccount.ID,\n                    Amount:        amount,\n                }\n                store.EXPECT().TransferTx(gomock.Any(), gomock.Eq(arg)).Times(0)\n            },\n            checkResponse: func(recoder *httptest.ResponseRecorder) {\n                require.Equal(t, http.StatusNotFound, recoder.Code)\n            },\n        }, {\n            name: "InternalErrorFromAccount",\n            body: gin.H{\n                "from_account_id": fromAccount.ID,\n                "to_account_id":   toAccount.ID,\n                "amount":          amount,\n                "currency":        util.USD,\n            },\n            buildStubs: func(store *mockdb.MockStore) {\n                //\uacc4\uc815 \uc720\ud6a8\uc131 \uac80\uc0ac\n                store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(fromAccount.ID)).Times(1).Return(db.Account{}, sql.ErrConnDone)\n                store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(toAccount.ID)).Times(0)\n\n                arg := db.TransferTxParams{\n                    FromAccountID: fromAccount.ID,\n                    ToAccountID:   toAccount.ID,\n                    Amount:        amount,\n                }\n                store.EXPECT().TransferTx(gomock.Any(), gomock.Eq(arg)).Times(0)\n            },\n            checkResponse: func(recoder *httptest.ResponseRecorder) {\n                require.Equal(t, http.StatusInternalServerError, recoder.Code)\n            },\n        }, {\n            name: "InternalErrorToAccount",\n            body: gin.H{\n                "from_account_id": fromAccount.ID,\n                "to_account_id":   toAccount.ID,\n                "amount":          amount,\n                "currency":        util.USD,\n            },\n            buildStubs: func(store *mockdb.MockStore) {\n                //\uacc4\uc815 \uc720\ud6a8\uc131 \uac80\uc0ac\n                store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(fromAccount.ID)).Times(1).Return(fromAccount, nil)\n                store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(toAccount.ID)).Times(1).Return(db.Account{}, sql.ErrConnDone)\n\n                arg := db.TransferTxParams{\n                    FromAccountID: fromAccount.ID,\n                    ToAccountID:   toAccount.ID,\n                    Amount:        amount,\n                }\n                store.EXPECT().TransferTx(gomock.Any(), gomock.Eq(arg)).Times(0)\n            },\n            checkResponse: func(recoder *httptest.ResponseRecorder) {\n                require.Equal(t, http.StatusInternalServerError, recoder.Code)\n            },\n        }, {\n            name: "InternalErrorTransferTX",\n            body: gin.H{\n                "from_account_id": fromAccount.ID,\n                "to_account_id":   toAccount.ID,\n                "amount":          amount,\n                "currency":        util.USD,\n            },\n            buildStubs: func(store *mockdb.MockStore) {\n                //\uacc4\uc815 \uc720\ud6a8\uc131 \uac80\uc0ac\n                store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(fromAccount.ID)).Times(1).Return(fromAccount, nil)\n                store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(toAccount.ID)).Times(1).Return(toAccount, nil)\n\n                arg := db.TransferTxParams{\n                    FromAccountID: fromAccount.ID,\n                    ToAccountID:   toAccount.ID,\n                    Amount:        amount,\n                }\n                store.EXPECT().TransferTx(gomock.Any(), gomock.Eq(arg)).Times(1).Return(db.TransferTxResult{}, sql.ErrConnDone)\n            },\n            checkResponse: func(recoder *httptest.ResponseRecorder) {\n                require.Equal(t, http.StatusInternalServerError, recoder.Code)\n            },\n        }, {\n            name: "FromAccountBadCurreny",\n            body: gin.H{\n                "from_account_id": krwAccount.ID,\n                "to_account_id":   toAccount.ID,\n                "amount":          amount,\n                "currency":        util.USD,\n            },\n            buildStubs: func(store *mockdb.MockStore) {\n                //\uacc4\uc815 \uc720\ud6a8\uc131 \uac80\uc0ac\n                store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(krwAccount.ID)).Times(1).Return(krwAccount, nil)\n                store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(toAccount.ID)).Times(0)\n\n                arg := db.TransferTxParams{\n                    FromAccountID: krwAccount.ID,\n                    ToAccountID:   toAccount.ID,\n                    Amount:        amount,\n                }\n                store.EXPECT().TransferTx(gomock.Any(), gomock.Eq(arg)).Times(0)\n            },\n            checkResponse: func(recoder *httptest.ResponseRecorder) {\n                require.Equal(t, http.StatusBadRequest, recoder.Code)\n            },\n        }, {\n            name: "ToAccountBadCurreny",\n            body: gin.H{\n                "from_account_id": fromAccount.ID,\n                "to_account_id":   krwAccount.ID,\n                "amount":          amount,\n                "currency":        util.USD,\n            },\n            buildStubs: func(store *mockdb.MockStore) {\n                //\uacc4\uc815 \uc720\ud6a8\uc131 \uac80\uc0ac\n                store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(fromAccount.ID)).Times(1).Return(fromAccount, nil)\n                store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(krwAccount.ID)).Times(1).Return(krwAccount, nil)\n\n                arg := db.TransferTxParams{\n                    FromAccountID: fromAccount.ID,\n                    ToAccountID:   krwAccount.ID,\n                    Amount:        amount,\n                }\n                store.EXPECT().TransferTx(gomock.Any(), gomock.Eq(arg)).Times(0)\n            },\n            checkResponse: func(recoder *httptest.ResponseRecorder) {\n                require.Equal(t, http.StatusBadRequest, recoder.Code)\n            },\n        }, {\n            name: "InvalidCurrency",\n            body: gin.H{\n                "from_account_id": fromAccount.ID,\n                "to_account_id":   toAccount.ID,\n                "amount":          amount,\n                "currency":        "BTC",\n            },\n            buildStubs: func(store *mockdb.MockStore) {\n                //\uacc4\uc815 \uc720\ud6a8\uc131 \uac80\uc0ac\n                store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(fromAccount.ID)).Times(0)\n                store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(toAccount.ID)).Times(0)\n\n                arg := db.TransferTxParams{\n                    FromAccountID: fromAccount.ID,\n                    ToAccountID:   toAccount.ID,\n                    Amount:        amount,\n                }\n                store.EXPECT().TransferTx(gomock.Any(), gomock.Eq(arg)).Times(0)\n            },\n            checkResponse: func(recoder *httptest.ResponseRecorder) {\n                require.Equal(t, http.StatusBadRequest, recoder.Code)\n            },\n        },\n    }\n\n    for i := range testCases {\n        tc := testCases[i]\n        t.Run(tc.name, func(t *testing.T) {\n            ctrl := gomock.NewController(t)\n            defer ctrl.Finish()\n\n            store := mockdb.NewMockStore(ctrl)\n            // build stub\n            tc.buildStubs(store)\n\n            server := NewServer(store)\n            recoder := httptest.NewRecorder()\n\n            data, err := json.Marshal(tc.body)\n            require.NoError(t, err)\n\n            url := "/transfers"\n            request, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(data))\n            require.NoError(t, err)\n\n            server.router.ServeHTTP(recoder, request)\n            tc.checkResponse(recoder)\n        })\n    }\n}\n')),(0,o.kt)("p",null,"\ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \uc885\ub958\uac00 \uc5c4\uccad \ub9ce\uc558\ub2e4. \uc774\uac78 \ud1a0\ub300\ub85c updaetAccount \ud14c\uc2a4\ud2b8\ub098 deleteAccount \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\ub97c \uac1c\uc120\ud560 \uc218 \uc788\uaca0\ub2e4."))}d.isMDXComponent=!0}}]);