"use strict";(self.webpackChunkblogsaurus=self.webpackChunkblogsaurus||[]).push([[8135],{3905:(n,r,t)=>{t.d(r,{Zo:()=>i,kt:()=>k});var e=t(67294);function a(n,r,t){return r in n?Object.defineProperty(n,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[r]=t,n}function o(n,r){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(n);r&&(e=e.filter((function(r){return Object.getOwnPropertyDescriptor(n,r).enumerable}))),t.push.apply(t,e)}return t}function c(n){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(n,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(n,r,Object.getOwnPropertyDescriptor(t,r))}))}return n}function l(n,r){if(null==n)return{};var t,e,a=function(n,r){if(null==n)return{};var t,e,a={},o=Object.keys(n);for(e=0;e<o.length;e++)t=o[e],r.indexOf(t)>=0||(a[t]=n[t]);return a}(n,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(e=0;e<o.length;e++)t=o[e],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var u=e.createContext({}),s=function(n){var r=e.useContext(u),t=r;return n&&(t="function"==typeof n?n(r):c(c({},r),n)),t},i=function(n){var r=s(n.components);return e.createElement(u.Provider,{value:r},n.children)},m="mdxType",p={inlineCode:"code",wrapper:function(n){var r=n.children;return e.createElement(e.Fragment,{},r)}},d=e.forwardRef((function(n,r){var t=n.components,a=n.mdxType,o=n.originalType,u=n.parentName,i=l(n,["components","mdxType","originalType","parentName"]),m=s(t),d=a,k=m["".concat(u,".").concat(d)]||m[d]||p[d]||o;return t?e.createElement(k,c(c({ref:r},i),{},{components:t})):e.createElement(k,c({ref:r},i))}));function k(n,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof n||a){var o=t.length,c=new Array(o);c[0]=d;var l={};for(var u in r)hasOwnProperty.call(r,u)&&(l[u]=r[u]);l.originalType=n,l[m]="string"==typeof n?n:a,c[1]=l;for(var s=2;s<o;s++)c[s]=t[s];return e.createElement.apply(null,c)}return e.createElement.apply(null,t)}d.displayName="MDXCreateElement"},30643:(n,r,t)=>{t.r(r),t.d(r,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var e=t(87462),a=(t(67294),t(3905));const o={sidebar_position:7},c="07. [BackEnd] golang transaction \uad6c\ud604",l={unversionedId:"backend-master/backend7",id:"backend-master/backend7",title:"07. [BackEnd] golang transaction \uad6c\ud604",description:"transaction\uc774\ub780",source:"@site/docs/backend-master/backend7.md",sourceDirName:"backend-master",slug:"/backend-master/backend7",permalink:"/docs/backend-master/backend7",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"backSidebar",previous:{title:"06. [BackEnd] Golang CRUD Unit test",permalink:"/docs/backend-master/backend6"},next:{title:"08. [BackEnd] golang db transaction deadlock",permalink:"/docs/backend-master/backend8"}},u={},s=[{value:"transaction\uc774\ub780",id:"transaction\uc774\ub780",level:2},{value:"\uc608\uc2dc",id:"\uc608\uc2dc",level:3},{value:"transaction\uc774 \ud544\uc694\ud55c \uc774\uc720",id:"transaction\uc774-\ud544\uc694\ud55c-\uc774\uc720",level:3},{value:"ACID",id:"acid",level:3},{value:"transaction \uc2e4\ud589\ubc95",id:"transaction-\uc2e4\ud589\ubc95",level:3},{value:"transaction \ud558\uae30",id:"transaction-\ud558\uae30",level:2},{value:"transfer transaction",id:"transfer-transaction",level:3},{value:"1. transfer recode \uc0dd\uc131",id:"1-transfer-recode-\uc0dd\uc131",level:3},{value:"2. FromEntry",id:"2-fromentry",level:3},{value:"3. ToEntry",id:"3-toentry",level:3},{value:"4, 5 Account",id:"4-5-account",level:3},{value:"\ud14c\uc2a4\ud2b8 \ucf54\ub4dc \uc791\uc131",id:"\ud14c\uc2a4\ud2b8-\ucf54\ub4dc-\uc791\uc131",level:2},{value:"\uc219\uc81c",id:"\uc219\uc81c",level:2}],i={toc:s},m="wrapper";function p(n){let{components:r,...t}=n;return(0,a.kt)(m,(0,e.Z)({},i,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"07-backend-golang-transaction-\uad6c\ud604"},"07. ","[BackEnd]"," golang transaction \uad6c\ud604"),(0,a.kt)("h2",{id:"transaction\uc774\ub780"},"transaction\uc774\ub780"),(0,a.kt)("hr",null),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\ud558\ub098\uc758 \uc77c\uc758 \ub2e8\uc704\ub2e4.")),(0,a.kt)("h3",{id:"\uc608\uc2dc"},"\uc608\uc2dc"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Transfer 10 USD \nfrom bank account1 \nto account2\n")),(0,a.kt)("p",null,"\uc704\uc640 \uac19\uc740 \ub3d9\uc791\uc744 \ud558\ub824\uba74 5\uac1c\uc758 transaction\uc774 \ud544\uc694\ud558\ub2e4\uace0 \ud569\ub2c8\ub2e4."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"amount\uac00 10\uc778 transfer\ub97c \ub9cc\ub4e0\ub2e4.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"amount\uac00 -10\uc774\uace0 account_id\uac00 account1\uc758 \uac83\uc778 entry\ub97c \ub9cc\ub4e0\ub2e4.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"amount\uac00 10\uc774\uace0 account_id\uac00 account2\uc758 \uac83\uc778 entry\ub97c \ub9cc\ub4e0\ub2e4.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"account1\uc758 balance\ub97c 10 \ube80\ub2e4.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"account2\uc758 balance\ub97c 10 \ub354\ud55c\ub2e4."))),(0,a.kt)("p",null,"\uc704\uc640 \uac19\uc740 5\uac00\uc9c0 transaction\uc774 \ud544\uc694\ud558\ub2e4."),(0,a.kt)("h3",{id:"transaction\uc774-\ud544\uc694\ud55c-\uc774\uc720"},"transaction\uc774 \ud544\uc694\ud55c \uc774\uc720"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\uc2dc\uc2a4\ud15c \uc7a5\uc560 \uc2dc\uc5d0\ub3c4 \uc2e0\ub8b0\ud560 \uc218 \uc788\uace0 \uc77c\uad00\ub41c \uc77c\uc758 \ub2e8\uc704\ub97c \uc81c\uacf5\ud55c\ub2e4.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \ub3d9\uc2dc\uc5d0 \uc811\uadfc\ud560 \ub54c \ud504\ub85c\uadf8\ub7a8 \uac04 isolation(\uaca9\ub9ac)\ub97c \uc81c\uacf5\ud55c\ub2e4."))),(0,a.kt)("h3",{id:"acid"},"ACID"),(0,a.kt)("p",null,"transaction\uc774 \ub9cc\uc871\ud574\uc57c \ud558\ub294 \uc18d\uc131"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"A (Atomicity) - \uc6d0\uc790\uc131")),(0,a.kt)("p",null,"\ubaa8\ub4e0 \uc791\uc5c5\uc774 \uc131\uacf5\uc801\uc73c\ub85c \uc2e4\ud589 \ud558\ub4e0 \uc2e4\ud328\ub4e0 \uc785\ub2c8\ub2e4. \uc2e4\ud328\ud558\uba74 \ubaa8\ub450 \ubc18\uc601\uc774 \uc548\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc131\uacf5\ud558\uba74 \ubaa8\ub450 \ubc18\uc601\uc774 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4."),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"C (Consistency) - \uc77c\uad00\uc131")),(0,a.kt)("p",null,"transaction \uc774\ud6c4 db \uc0c1\ud0dc\uac00 \uc720\ud6a8\ud574\uc57c \ud55c\ub2e4. \ubaa8\ub4e0 \uc81c\uc57d \uc870\uac74\uc744 \ub9cc\uc871\ud574\uc57c \ud55c\ub2e4."),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"I (Isolation) - \uaca9\ub9ac\uc131")),(0,a.kt)("p",null,"\ub3d9\uc2dc\uc5d0 transaction\uc774 \ubc1c\uc0dd\ud558\ub354\ub77c\ub3c4 \uc11c\ub85c \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0 \uc54a\ub294\ub2e4."),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"D (Durability) - \uc601\uc18d\uc131")),(0,a.kt)("p",null,"transaction\uc5d0 \uc758\ud574 \uc791\uc131\ub41c \ub370\uc774\ud130\ub294 \uc601\uad6c \uc800\uc7a5\uc18c\uc5d0 \uae30\ub85d\ub418\uc5b4\uc57c \ud55c\ub2e4."),(0,a.kt)("h3",{id:"transaction-\uc2e4\ud589\ubc95"},"transaction \uc2e4\ud589\ubc95"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"BEGIN;\n...\nCOMMIT;\n")),(0,a.kt)("p",null,"\uc704\ub294 \uc131\uacf5\ud55c\ub2e4\uba74"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"BEGIN;\n...\nROLLBACK;\n")),(0,a.kt)("p",null,"\uc704\ub294 \uc2e4\ud328\ud558\uba74 \uc774\ub807\uac8c \ub429\ub2c8\ub2e4."),(0,a.kt)("h2",{id:"transaction-\ud558\uae30"},"transaction \ud558\uae30"),(0,a.kt)("hr",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type Store struct {\n    *Queries         // \uc0c1\uc18d\n    db       *sql.DB // db \ub9cc\ub4dc\ub294\ub370 \ud544\uc218\n}\n\n// store \uc0dd\uc131\nfunc NewStore(db *sql.DB) *Store {\n    return &Store{\n        db:      db,\n        Queries: New(db), // NewQueries\n    }\n}\n\nfunc (store *Store) execTx(ctx context.Context, fn func(*Queries) error) error {\n    tx, err := store.db.BeginTx(ctx, &sql.TxOptions{})\n}\n")),(0,a.kt)("p",null,"Queries \uac1d\uccb4\ub97c \uc0c1\uc18d\ubc1b\uace0 db\ub97c \uac12\uc73c\ub85c \ubc1b\ub294 store \uad6c\uc870\uccb4 \uc0dd\uc131\ud569\ub2c8\ub2e4."),(0,a.kt)("p",null,"execTx\ub294 transaction \uc2e4\ud589\ud558\ub294 \ud568\uc218\uc778\ub370 sql.TxOptions\uc5d0\uc11c isolation level\uc744 \uc815\ud560 \uc218\uc788\uc2b5\ub2c8\ub2e4. \uc9c0\uae08\uc740 nil\ub85c \uc124\uc815\ud55c\ub2e4\uace0 \ud569\ub2c8\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func (store *Store) execTx(ctx context.Context, fn func(*Queries) error) error {\n    tx, err := store.db.BeginTx(ctx, nil)\n    if err != nil {\n        return err\n    }\n    q := New(tx)\n    err = fn(q)\n    // transaction\uc5d0\uc11c \uc5d0\ub7ec\ub098\uba74 \ub864\ubc31\ud558\uae30\n    if err != nil {\n        if rbErr := tx.Rollback(); rbErr != nil {\n            return fmt.Errorf("tx err: %v, rb err: %v", err, rbErr)\n        }\n        return err\n    }\n\n    // transaction \ubaa8\ub450 \uc131\uacf5\ud558\uba74 commit\n    return tx.Commit()\n}\n')),(0,a.kt)("p",null,"\uc804\uccb4 \ucf54\ub4dc\ub294 \uc704\uc640 \uac19\ub2e4. BeginTx\ud560 \ub54c \uc5d0\ub7ec\ub098\uba74 \uadf8\ub0e5 \uc5d0\ub7ec \ubc18\ud658\ud558\uace0"),(0,a.kt)("p",null,"transaction \uc218\ud589 \uc911 \uc5d0\ub7ec\ub098\uba74 Rollback\ud558\uace0 \uc548\ub098\uba74 Commit\uc744 return\ud55c\ub2e4. \ud558\uc9c0\ub9cc \uc704 \ud568\uc218\ub294 \uc18c\ubb38\uc790\ub85c \uc2dc\uc791\ud55c\ub2e4. \uc9c1\uc811 \ud638\ucd9c\ud574\uc11c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \ub2e4\ub978 \ud568\uc218\ub85c \ud638\ucd9c\ud574\uc11c \uc0ac\uc6a9\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4."),(0,a.kt)("h3",{id:"transfer-transaction"},"transfer transaction"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'type TransferTxParams struct {\n    FromAccountID int64 `json:"from_account_id"`\n    ToAccountID   int64 `json:"to_account_id"`\n    Amount        int64 `json:"amount"`\n}\n')),(0,a.kt)("p",null,"transfer transaction\uc758 \ud30c\ub77c\ubbf8\ud130\ub294 3\uac1c\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'type TransferTxResult struct {\n    Transfer    Transfer `json:"transfer"`\n    FromAccount Account  `json:"from_account"`\n    ToAccount   Account  `json:"to_account"`\n    FromEntry   Entry    `json:"from_entry"`\n    ToEntry Entry    `json:"to_entry"`\n}\n')),(0,a.kt)("p",null,"TransferTxResult\ub294 5\uac1c\uc774\ub2e4."),(0,a.kt)("p",null,"transfer\ub294 transfer FromAccount, ToAccount\ub294 balance \uc5c5\ub370\uc774\ud2b8\ub97c \uc704\ud574 FromEntry\uc640 ToEntry\ub294 \ub3c8\uc758 in out\uc744 \uc704\ud574"),(0,a.kt)("h3",{id:"1-transfer-recode-\uc0dd\uc131"},"1. transfer recode \uc0dd\uc131"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (store *Store) TransferTx(ctx context.Context, arg TransferTxParams) (TransferTxResult, error) {\n    var result TransferTxResult\n\n    err := store.execTx(ctx, func(q *Queries) error {\n        var err error\n        result.Transfer, err = q.CreateTransfer(ctx, CreateTransferParams{\n            FromAccountsID: arg.FromAccountID,\n            ToAccountsID:   arg.ToAccountID,\n            Amount:         arg.Amount,\n        })\n        if err != nil {\n            return err\n        }\n        return nil\n    })\n\n    return result, err\n}\n")),(0,a.kt)("h3",{id:"2-fromentry"},"2. FromEntry"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"result.FromEntry, err = q.CreateEntry(ctx, CreateEntryParams{\n    AccountsID: arg.FromAccountID,\n    Amount:     -arg.Amount,\n})\nif err != nil {\n    return err\n}\n")),(0,a.kt)("p",null,"\ud2b9\uc774\ud55c \ubd80\ubd84\uc740 ",(0,a.kt)("inlineCode",{parentName:"p"},"-arg.Amount"),"\uc778\ub370 \uc65c\ub0d0\ud558\uba74 \ub3c8\uc774 FromAccount\ub85c \ubd80\ud130 \ube60\uc838\ub098\uac00\ub294 \uac83\uc774\uae30 \ub54c\ubb38\uc774\ub2e4."),(0,a.kt)("h3",{id:"3-toentry"},"3. ToEntry"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"result.ToEntry, err = q.CreateEntry(ctx, CreateEntryParams{\n    AccountsID: arg.ToAccountID,\n    Amount:     arg.Amount,\n})\nif err != nil {\n    return err\n}\n")),(0,a.kt)("h3",{id:"4-5-account"},"4, 5 Account"),(0,a.kt)("p",null,"deadlock\uc744 \uc54c\uc544\uc57c \ud574\uc11c \uc77c\ub2e8 \ud328\uc2a4"),(0,a.kt)("h2",{id:"\ud14c\uc2a4\ud2b8-\ucf54\ub4dc-\uc791\uc131"},"\ud14c\uc2a4\ud2b8 \ucf54\ub4dc \uc791\uc131"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'var testQueries *Queries\nvar testDB *sql.DB\n\nfunc TestMain(m *testing.M) {\n    var err error\n    // db \uc5f0\uacb0 \ud14c\uc2a4\ud2b8\n    testDB, err = sql.Open(dbDriver, dbSource)\n    if err != nil {\n        log.Fatal("cannot connect : ", err)\n    }\n\n    // db \uc811\uc18d \uac1d\uccb4\ub97c testQueries\uc5d0 \uc800\uc7a5\n    testQueries = New(testDB)\n\n    // \ud14c\uc2a4\ud2b8 \uc2dc\uc791\n    os.Exit(m.Run())\n}\n')),(0,a.kt)("p",null,"sql.Open\uc73c\ub85c testDB\ub97c \ud560\ub2f9\ud569\ub2c8\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package db\n\nimport (\n    "context"\n    "testing"\n\n    "github.com/stretchr/testify/require"\n)\n\nfunc TestTransferTx(t *testing.T) {\n    store := NewStore(testDB)\n\n    account1 := createRandomAccount(t)\n    account2 := createRandomAccount(t)\n\n    // \ub3d9\uc2dc\uc131 \ud14c\uc2a4\ud2b8\ub97c \uc704\ud574 go routine\uc744 \ud65c\uc6a9\n    n := 5\n    amount := int64(10)\n\n    errs := make(chan error)\n    results := make(chan TransferTxResult)\n\n    for i := 0; i < n; i++ {\n        go func() {\n            result, err := store.TransferTx(context.Background(), TransferTxParams{\n                FromAccountID: account1.ID,\n                ToAccountID:   account2.ID,\n                Amount:        amount,\n            })\n            errs <- err\n            results <- result\n        }()\n    }\n    for i := 0; i < n; i++ {\n        err := <-errs\n        require.NoError(t, err)\n\n        result := <-results\n        require.NotEmpty(t, result)\n\n        // check transfer\n        transfer := result.Transfer\n        require.NotEmpty(t, transfer)\n        require.Equal(t, account1.ID, transfer.FromAccountsID)\n        require.Equal(t, account2.ID, transfer.ToAccountsID)\n        require.Equal(t, amount, transfer.Amount)\n        require.NotZero(t, transfer.ID)\n        require.NotZero(t, transfer.CreatedAt)\n\n        _, err = store.GetTransfer(context.Background(), transfer.ID)\n        require.NoError(t, err)\n\n        // check entries\n        fromEntry := result.FromEntry\n        require.NotEmpty(t, fromEntry)\n        require.Equal(t, account1.ID, fromEntry.AccountsID)\n        require.Equal(t, -amount, fromEntry.Amount)\n        require.NotZero(t, fromEntry.ID)\n        require.NotZero(t, fromEntry.CreatedAt)\n\n        _, err = store.GetEntry(context.Background(), fromEntry.ID)\n        require.NoError(t, err)\n\n        toEntry := result.ToEntry\n        require.NotEmpty(t, toEntry)\n        require.Equal(t, account2.ID, toEntry.AccountsID)\n        require.Equal(t, amount, toEntry.Amount)\n        require.NotZero(t, toEntry.ID)\n        require.NotZero(t, toEntry.CreatedAt)\n\n        _, err = store.GetEntry(context.Background(), toEntry.ID)\n        require.NoError(t, err)\n\n        // ToDo check accounts\n    }\n}\n')),(0,a.kt)("p",null,"store\ubcc0\uc218\uc5d0 NewStore\ub85c \ub9cc\ub4e4\uc5b4\uc11c \ub123\uc5b4\uc8fc\uba74 Queries\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,a.kt)("p",null,"\uc911\uac04\ubd80\ud130 \ubcf4\uba74 for\ubb38\uc744 \ud1b5\ud574\uc11c \ud2b8\ub79c\uc7ad\uc158\uc744 5\uac1c \ub9cc\ub4dc\ub294\ub370 \uc774\ub294 \ub3d9\uc2dc\uc5d0 \ud2b8\ub79c\uc7ad\uc158 \uc3e0 \ub54c \uad50\ucc29\uc0c1\ud0dc\uc5d0 \ube60\uc9c0\ub294\uc9c0 \ud655\uc778\ud558\uae30 \uc704\ud574\uc11c\uc774\ub2e4."),(0,a.kt)("h2",{id:"\uc219\uc81c"},"\uc219\uc81c"),(0,a.kt)("hr",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// fromAccount\n\nfromAccount, err := q.GetAccount(ctx, arg.FromAccountID)\nif err != nil {\n    return err\n}\n\nresult.FromAccount, err = q.UpdateAccount(ctx, UpdateAccountParams{\n    ID:      arg.FromAccountID,\n    Balance: fromAccount.Balance - arg.Amount,\n})\nif err != nil {\n    return err\n}\n\n// toAccount\ntoAccount, err := q.GetAccount(ctx, arg.ToAccountID)\nif err != nil {\n    return err\n}\n\nresult.ToAccount, err = q.UpdateAccount(ctx, UpdateAccountParams{\n    ID:      arg.ToAccountID,\n    Balance: toAccount.Balance + arg.Amount,\n})\nif err != nil {\n    return err\n}\n")),(0,a.kt)("p",null,"\uc704\ucc98\ub7fc \ucd94\uac00\ud574\ubd24\ub294\ub370 \ub9de\ub294\uc9c0\ub294 \ubaa8\ub974\uaca0\ub2e4."))}p.isMDXComponent=!0}}]);