"use strict";(self.webpackChunkblogsaurus=self.webpackChunkblogsaurus||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"design pattern rule","metadata":{"permalink":"/blog/design pattern rule","editUrl":"https://github.com/kihyun1998/blogsaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-08-29-rule/index.md","source":"@site/blog/2023-08-29-rule/index.md","title":"[SOLID] \uac1d\uccb4 \uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d(OOP) \uc6d0\uce59","description":"SRP ( \ub2e8\uc77c \ucc45\uc784\uc758 \uc6d0\uce59 : Single Responsibility Principle )","date":"2023-08-29T00:00:00.000Z","formattedDate":"August 29, 2023","tags":[{"label":"design pattern","permalink":"/blog/tags/design-pattern"},{"label":"rule","permalink":"/blog/tags/rule"}],"readingTime":1.56,"hasTruncateMarker":false,"authors":[{"name":"Park Ki Hyun","title":"Deveploper","url":"https://github.com/kihyun1998","imageURL":"https://github.com/kihyun1998.png","key":"kihyun"}],"frontMatter":{"slug":"design pattern rule","title":"[SOLID] \uac1d\uccb4 \uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d(OOP) \uc6d0\uce59","authors":["kihyun"],"tags":["design pattern","rule"]},"nextItem":{"title":"\uc804\ub7b5 \ud328\ud134 - Strategy pattern","permalink":"/blog/strategy pattern"}},"content":"## SRP ( \ub2e8\uc77c \ucc45\uc784\uc758 \uc6d0\uce59 : Single Responsibility Principle )\\n\\n## OCP ( \uacc4\ubc29-\ud3d0\uc1c4\uc758 \uc6d0\uce59 : Open Close Principle )\\n\\n1. \ubc14\ub00c\ub294 \ubd80\ubd84\uc744 \ucea1\uc290\ud654\ud55c\ub2e4.\\n    - \ubcc0\ud558\ub294(\ud655\uc7a5\ub418\ub294) \uac83\uacfc \ubcc0\ud558\uc9c0 \uc54a\uc744 \uac83\uc744 \uad6c\ubd84\\n\\n2. \uc0c1\uc18d\ubcf4\ub2e4\ub294 \uad6c\uc131\uc744 \ud65c\uc6a9\ud55c\ub2e4.\\n\\n3. \uad6c\ud604\ubcf4\ub2e4\ub294 \uc778\ud130\ud398\uc774\uc2a4\uc5d0 \ub9de\ucdb0\uc11c \ud504\ub85c\uadf8\ub798\ubc0d\ud55c\ub2e4.\\n    - \uc815\uc758\ud55c \uc778\ud130\ud398\uc774\uc2a4\uc5d0 \uc758\uc874\\n\\n4. \uc0c1\ud638\uc791\uc6a9\ud558\ub294 \uac1d\uccb4 \uc0ac\uc774\uc5d0\uc11c\ub294 \uac00\ub2a5\ud558\uba74 \ub290\uc2a8\ud55c \uacb0\ud569\uc744 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4.\\n\\n5. \ud074\ub798\uc2a4\ub294 \ud655\uc7a5\uc5d0\ub294 \uc5f4\ub824\uc788\uc5b4\uc57c \ud558\uace0 \ubcc0\uacbd\uc5d0\ub294 \ub2eb\ud600 \uc788\uc5b4\uc57c \ud55c\ub2e4.\\n\\n## LSP ( \ub9ac\uc2a4\ucf54\ud504 \uce58\ud658\uc758 \uc6d0\uce59 : The LisKov Substitution Principle )\\n\\n## ISP ( \uc778\ud130\ud398\uc774\uc2a4 \ubd84\ub9ac\uc758 \uc6d0\uce59 : Interface Segregation Principle )\\n\\n## DIP ( \uc758\uc874\uc131 \uc5ed\uc804\uc758 \uc6d0\uce59 : Dependency Inversion Principle )\\n\\n1. \ucd94\uc0c1\ud654\ub41c \uac83\uc5d0 \uc758\uc874\ud558\uac8c \ub9cc\ub4e4\uace0 \uad6c\uc0c1 \ud074\ub798\uc2a4\uc5d0 \uc758\uc874\ud558\uc9c0 \uc54a\uac8c \ub9cc\ub4e0\ub2e4.\\n\\n2. \uace0\uc218\uc900 \uad6c\uc131 \uc694\uc18c\uac00 \uc800\uc218\uc900 \uad6c\uc131 \uc694\uc18c\uc5d0 \uc758\uc874\ud558\uba74 \uc548\ub418\uace0 \ud56d\uc0c1 \ucd94\uc0c1\ud654\uc5d0 \uc758\uc874\ud558\uac8c \ub9cc\ub4e4\uc5b4\uc57c \ud55c\ub2e4.\\n`\uace0\uc218\uc900 \uad6c\uc131 \uc694\uc18c` : \ub2e4\ub978 `\uc800\uc218\uc900 \uad6c\uc131 \uc694\uc18c`\uc5d0 \uc758\ud574 \uc815\uc758\ub418\ub294 \ud589\ub3d9\uc774 \ub4e4\uc5b4\uc788\ub294 \uad6c\uc131 \uc694\uc18c"},{"id":"strategy pattern","metadata":{"permalink":"/blog/strategy pattern","editUrl":"https://github.com/kihyun1998/blogsaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-08-29-stratgy/index.md","source":"@site/blog/2023-08-29-stratgy/index.md","title":"\uc804\ub7b5 \ud328\ud134 - Strategy pattern","description":"\uc815\uc758","date":"2023-08-29T00:00:00.000Z","formattedDate":"August 29, 2023","tags":[{"label":"design pattern","permalink":"/blog/tags/design-pattern"},{"label":"strategy pattern","permalink":"/blog/tags/strategy-pattern"}],"readingTime":1.465,"hasTruncateMarker":false,"authors":[{"name":"Park Ki Hyun","title":"Deveploper","url":"https://github.com/kihyun1998","imageURL":"https://github.com/kihyun1998.png","key":"kihyun"}],"frontMatter":{"slug":"strategy pattern","title":"\uc804\ub7b5 \ud328\ud134 - Strategy pattern","authors":["kihyun"],"tags":["design pattern","strategy pattern"]},"prevItem":{"title":"[SOLID] \uac1d\uccb4 \uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d(OOP) \uc6d0\uce59","permalink":"/blog/design pattern rule"},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"## \uc815\uc758\\n\\n\uc54c\uace0\ub9ac\uc998\uad70\uc744 \uc815\uc758\ud558\uace0 \ucea1\uc290\ud654\ud574\uc11c \uac01\uac01\uc758 \uc54c\uace0\ub9ac\uc998\uad70\uc744 \uc218\uc815\ud574\uc11c \uc4f8 \uc218 \uc788\uac8c \ud574\uc900\ub2e4.\\n\uc804\ub7b5 \ud328\ud134\uc744 \uc0ac\uc6a9\ud558\uba74 \ud074\ub77c\uc774\uc5b8\ud2b8\ub85c\ubd80\ud130 \uc54c\uace0\ub9ac\uc998\uc744 \ubd84\ub9ac\ud574\uc11c \ub3c5\ub9bd\uc801\uc73c\ub85c \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4.\\n\\n## \ud2b9\uc9d5\\n\\n- \ud568\uc218 \uc911 \ubcc0\ud558\ub294 \ucf54\ub4dc\ub97c class\ub85c \uad6c\ud604\ud558\uc5ec \uc0c1\uc18d\ubc1b\ub294 \uac83\uc774 \uc544\ub2cc interface\ub85c \uad6c\ud604\ud558\uc5ec\uc11c Composition\ud558\ub294\uac8c \uc88b\ub2e4.\\n\\n## \uc608\uc2dc\\n\\n```java title=\\"/src/interfaces/FlyBehavior.java\\"\\npublic interface FlyBehavor {\\n    public void fly();\\n}\\n```\\n\uc704 \ucc98\ub7fc \ub098\ub294 \ud589\ub3d9 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uad6c\ud604\ud558\uace0\\n\\n```java title=\\"/src/classes/Duck.java\\"\\npublic abstract class Duck {\\n    FlyBehavor flyBehavor;\\n\\n    public void setFlyBehavor(FlyBehavor flyBehavor) {\\n        this.flyBehavor = flyBehavor;\\n    }\\n}\\n```\\n\ucd94\uc0c1 \ud074\ub798\uc2a4\uc5d0\uc120 interface \uc120\uc5b8 \ubc0f setter\ub97c \uad6c\ud604\ud558\uace0\\n\\n```java title=\\"/src/classes/FlyNoway ... FlyWithWings.java\\"\\npublic class FlyNoWay implements FlyBehavor {\\n    @Override\\n    public void fly() {\\n        System.out.println(\\"I can\'t fly ! TT\\");\\n    }\\n}\\n\\npublic class FlyRocketPowered implements FlyBehavor {\\n    @Override\\n    public void fly() {\\n        System.out.println(\\"ROCKET FLY!!\\");\\n    }\\n}\\n\\npublic class FlyWithWings implements FlyBehavor {\\n    @Override\\n    public void fly() {\\n        System.out.println(\\"I can fly!!\\");\\n    }\\n}\\n```\\n\\n\uc704 \ucf54\ub4dc\ub4e4\ucc98\ub7fc interface\ub97c \uad6c\ud604\ud558\uc5ec\uc11c \uc624\ubc84\ub77c\uc774\ub529\uc744 \ud569\ub2c8\ub2e4.\\n\\n```java title=\\"/src/classes/MallardDuck.java\\"\\npublic class MallardDuck extends Duck{\\n    public MallardDuck(){\\n        flyBehavor = new FlyWithWings();\\n    }\\n}\\n```\\n\uc0dd\uc131\uc790\uc5d0\uc11c \uc0c8\ub85c \uad6c\ud604\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub85c \uc0dd\uc131\ud569\ub2c8\ub2e4."},{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/kihyun1998/blogsaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-08-29-welcome/index.md","source":"@site/blog/2023-08-29-welcome/index.md","title":"Welcome","description":"Docusaurus \uccab\ubc88\uc9f8 \uae00\uc774\ub2e4.","date":"2023-08-29T00:00:00.000Z","formattedDate":"August 29, 2023","tags":[{"label":"docusaurus","permalink":"/blog/tags/docusaurus"},{"label":"first post","permalink":"/blog/tags/first-post"}],"readingTime":0.095,"hasTruncateMarker":false,"authors":[{"name":"Park Ki Hyun","title":"Deveploper","url":"https://github.com/kihyun1998","imageURL":"https://github.com/kihyun1998.png","key":"kihyun"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["kihyun"],"tags":["docusaurus","first post"]},"prevItem":{"title":"\uc804\ub7b5 \ud328\ud134 - Strategy pattern","permalink":"/blog/strategy pattern"}},"content":"Docusaurus \uccab\ubc88\uc9f8 \uae00\uc774\ub2e4.\\n\\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\\n\\n\uadc0\uc5ec\uc6b4 \uacf5\ub8e1 \uc778\ud615\uc774 \uc788\ub2e4."}]}')}}]);