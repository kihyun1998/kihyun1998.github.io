"use strict";(self.webpackChunkblogsaurus=self.webpackChunkblogsaurus||[]).push([[65673],{3905:(e,r,n)=>{n.d(r,{Zo:()=>d,kt:()=>g});var t=n(67294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function s(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?s(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=t.createContext({}),l=function(e){var r=t.useContext(u),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},d=function(e){var r=l(e.components);return t.createElement(u.Provider,{value:r},e.children)},i="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,s=e.originalType,u=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),i=l(n),p=a,g=i["".concat(u,".").concat(p)]||i[p]||m[p]||s;return n?t.createElement(g,o(o({ref:r},d),{},{components:n})):t.createElement(g,o({ref:r},d))}));function g(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=p;var c={};for(var u in r)hasOwnProperty.call(r,u)&&(c[u]=r[u]);c.originalType=e,c[i]="string"==typeof e?e:a,o[1]=c;for(var l=2;l<s;l++)o[l]=n[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},41671:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var t=n(87462),a=(n(67294),n(3905));const s={sidebar_position:19},o="19. [BackEnd] golang Custom Matcher \uad6c\ud604",c={unversionedId:"backend-master/backend19",id:"backend-master/backend19",title:"19. [BackEnd] golang Custom Matcher \uad6c\ud604",description:"\uac04\ub2e8\ud55c user api test code",source:"@site/docs/backend-master/backend19.md",sourceDirName:"backend-master",slug:"/backend-master/backend19",permalink:"/docs/backend-master/backend19",draft:!1,tags:[],version:"current",sidebarPosition:19,frontMatter:{sidebar_position:19},sidebar:"backSidebar",previous:{title:"18. [BackEnd] password hash & implement request user api",permalink:"/docs/backend-master/backend18"},next:{title:"20. [BackEnd] PASETO",permalink:"/docs/backend-master/backend20"}},u={},l=[{value:"\uac04\ub2e8\ud55c user api test code",id:"\uac04\ub2e8\ud55c-user-api-test-code",level:2},{value:"Custom Matcher \uad6c\ud604",id:"custom-matcher-\uad6c\ud604",level:2},{value:"Custom Matcher",id:"custom-matcher",level:3},{value:"\uc804\uccb4 \ucf54\ub4dc",id:"\uc804\uccb4-\ucf54\ub4dc",level:2}],d={toc:l},i="wrapper";function m(e){let{components:r,...n}=e;return(0,a.kt)(i,(0,t.Z)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"19-backend-golang-custom-matcher-\uad6c\ud604"},"19. ","[BackEnd]"," golang Custom Matcher \uad6c\ud604"),(0,a.kt)("h2",{id:"\uac04\ub2e8\ud55c-user-api-test-code"},"\uac04\ub2e8\ud55c user api test code"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"test code\ub97c \uadf8\ub0e5 \uc791\uc131\ud560 \uc218 \uc788\ub294\ub370 \ube44\ubc00\ubc88\ud638\ub97c bcrypt\ub85c \ud574\uc2dc\ud558\uae30 \ub54c\ubb38\uc5d0 \ub9e4\ubc88 \ubb34\uc791\uc704 \uc194\ud2b8\uac00 \ub2ec\ub77c\uc838\uc11c \ube44\ubc00\ubc88\ud638 \ub9e4\uce6d\uc774 \uc548\ub429\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574\uc11c matcher\ub97c \ub530\ub85c \uad6c\ud604\ud574\uc57c \ud55c\ub2e4\uace0 \ud558\ub124\uc694."),(0,a.kt)("h2",{id:"custom-matcher-\uad6c\ud604"},"Custom Matcher \uad6c\ud604"),(0,a.kt)("hr",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func Eq(x interface{}) Matcher { return eqMatcher{x} }\n")),(0,a.kt)("p",null,"Eq \ud568\uc218\ub294 \uc774\ub807\uac8c \uad6c\ud604\uc774 \ub418\uc5b4\uc788\uace0 \ubc18\ud658\ud574\uc57c \ud558\ub294 Matcher\ub97c \ubcf4\uba74"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type Matcher interface {\n    // Matches returns whether x is a match.\n    Matches(x interface{}) bool\n\n    // String describes what the matcher matches.\n    String() string\n}\n")),(0,a.kt)("p",null,"\uc704\ucc98\ub7fc \ub3fc\uc788\uc2b5\ub2c8\ub2e4."),(0,a.kt)("p",null,"\uc77c\uce58\uc5ec\ubd80\ub97c \ubc18\ud658\ud558\ub294 Matches\uc640 \ub85c\uae45 \ubaa9\uc801\uc73c\ub85c \uc815\uc758\ub41c String()\uc774 \uc788\uc2b5\ub2c8\ub2e4."),(0,a.kt)("p",null,"Eq Matcher\uc758 \ud568\uc218\ub4e4\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'type eqMatcher struct {\n    x interface{}\n}\n\nfunc (e eqMatcher) Matches(x interface{}) bool {\n    // In case, some value is nil\n    if e.x == nil || x == nil {\n        return reflect.DeepEqual(e.x, x)\n    }\n\n    // Check if types assignable and convert them to common type\n    x1Val := reflect.ValueOf(e.x)\n    x2Val := reflect.ValueOf(x)\n\n    if x1Val.Type().AssignableTo(x2Val.Type()) {\n        x1ValConverted := x1Val.Convert(x2Val.Type())\n        return reflect.DeepEqual(x1ValConverted.Interface(), x2Val.Interface())\n    }\n\n    return false\n}\n\nfunc (e eqMatcher) String() string {\n    return fmt.Sprintf("is equal to %v (%T)", e.x, e.x)\n}\n')),(0,a.kt)("p",null,"\uc774\ub97c \ud1a0\ub300\ub85c \ucee4\uc2a4\ud140\ud574\uc11c \ub9cc\ub4e4\uba74 \ub41c\ub2e4\uace0 \ud55c\ub2e4."),(0,a.kt)("h3",{id:"custom-matcher"},"Custom Matcher"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'type eqCreateUserParamsMatcher struct {\n    arg      db.CreateUserParams\n    password string\n}\n\nfunc (e eqCreateUserParamsMatcher) Matches(x interface{}) bool {\n\n    // \ud615\ubcc0\ud658\n    arg, ok := x.(db.CreateUserParams)\n    if !ok {\n        // \ud615\ubcc0\ud658 not ok \uba74 return false\n        return false\n    }\n\n    err := util.CheckPassword(e.password, arg.HashedPassword)\n    if err != nil {\n        return false\n    }\n\n    e.arg.HashedPassword = arg.HashedPassword\n    return reflect.DeepEqual(e.arg, arg)\n}\n\nfunc (e eqCreateUserParamsMatcher) String() string {\n    return fmt.Sprintf("matches arg %v and password %v", e.arg, e.password)\n}\n')),(0,a.kt)("p",null,"\uc774\ub807\uac8c \ucee4\uc2a4\ud140\ud560 \uc218 \uc788\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type eqCreateUserParamsMatcher struct {\n    arg      db.CreateUserParams\n    password string\n}\n")),(0,a.kt)("p",null,"\uc774\ub294 \uae30\uc874\uc5d0 interface\ub9cc \uc788\ub358 \uac83\uc744 \ub354 \uc798 \ube44\uad50\ud558\uae30 \uc704\ud574\uc11c \uc124\uc815\ud588\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (e eqCreateUserParamsMatcher) Matches(x interface{}) bool {\n\n    // \ud615\ubcc0\ud658\n    arg, ok := x.(db.CreateUserParams)\n    if !ok {\n        // \ud615\ubcc0\ud658 not ok \uba74 return false\n        return false\n    }\n\n    err := util.CheckPassword(e.password, arg.HashedPassword)\n    if err != nil {\n        return false\n    }\n\n    e.arg.HashedPassword = arg.HashedPassword\n    return reflect.DeepEqual(e.arg, arg)\n}\n")),(0,a.kt)("p",null,"\uc774\ub294 \uba3c\uc800 \uc785\ub825\ubc1b\uc740 interface\uac12\uc744 \ud615\ubcc0\ud658 \ud574\uc8fc\uace0 \ube44\ubc00\ubc88\ud638 \ube44\uad50\ub97c \ud558\uace0 \ud569\ub2c8\ub2e4."),(0,a.kt)("p",null,"\uc790\uc138\ud788 \ub85c\uadf8\ub97c \ucc0d\uc5b4\uc11c \ud655\uc778\ud574\ubcf4\ub2c8 ",(0,a.kt)("inlineCode",{parentName:"p"},"x interface")," \uac12\uc740 \ucd08\uae30\uc5d0 \uc0dd\uc131\ud55c randomUser \uac12\uc774\uace0 e\ub294 \uc704\uc5d0\uc11c \uc124\uc815\ud55c \ube44\ubc00\ubc88\ud638\uac00 \uc5c6\ub294 user \uac12\uacfc \ube44\ubc00\ubc88\ud638(\ud3c9\ubb38)\uc774 \ub4e4\uc5b4\uac00 \uc788\uc2b5\ub2c8\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func (e eqCreateUserParamsMatcher) String() string {\n    return fmt.Sprintf("matches arg %v and password %v", e.arg, e.password)\n}\n')),(0,a.kt)("p",null,"\uc774\uac74 \uadf8\ub0e5 ",(0,a.kt)("inlineCode",{parentName:"p"},"eqCreateUserParamsMatcher"),"\ub97c \ucd9c\ub825\ud558\uba74 \ub098\uc624\ub294 \ubb38\uc790\uc5f4 \uc124\uc815\uc785\ub2c8\ub2e4."),(0,a.kt)("p",null,"\ucd94\uac00\uc801\uc73c\ub85c \uc544\ub798 \ud568\uc218\ub97c \ub9cc\ub4e4\uc5b4\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func EqCreateUserParams(arg db.CreateUserParams, password string) gomock.Matcher {\n    return eqCreateUserParamsMatcher{arg, password}\n}\n")),(0,a.kt)("h2",{id:"\uc804\uccb4-\ucf54\ub4dc"},"\uc804\uccb4 \ucf54\ub4dc"),(0,a.kt)("hr",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'type eqCreateUserParamsMatcher struct {\n    arg      db.CreateUserParams\n    password string\n}\n\nfunc (e eqCreateUserParamsMatcher) Matches(x interface{}) bool {\n\n    // \ud615\ubcc0\ud658\n    arg, ok := x.(db.CreateUserParams)\n    if !ok {\n        // \ud615\ubcc0\ud658 not ok \uba74 return false\n        return false\n    }\n\n    err := util.CheckPassword(e.password, arg.HashedPassword)\n    if err != nil {\n        return false\n    }\n\n    e.arg.HashedPassword = arg.HashedPassword\n    return reflect.DeepEqual(e.arg, arg)\n}\n\nfunc (e eqCreateUserParamsMatcher) String() string {\n    return fmt.Sprintf("matches arg %v and password %v", e.arg, e.password)\n}\n\nfunc EqCreateUserParams(arg db.CreateUserParams, password string) gomock.Matcher {\n    return eqCreateUserParamsMatcher{arg, password}\n}\n\nfunc TestCreateUserAPI(t *testing.T) {\n    user, password := randomUser(t)\n    testCases := []struct {\n        name          string\n        body          gin.H\n        buildStubs    func(store *mockdb.MockStore)\n        checkResponse func(recoder *httptest.ResponseRecorder)\n    }{\n        {\n            name: "OK",\n            body: gin.H{\n                "username":  user.Username,\n                "password":  password,\n                "full_name": user.FullName,\n                "email":     user.Email,\n            },\n            buildStubs: func(store *mockdb.MockStore) {\n                arg := db.CreateUserParams{\n                    Username: user.Username,\n                    FullName: user.FullName,\n                    Email:    user.Email,\n                }\n                store.EXPECT().\n                    CreateUser(gomock.Any(), EqCreateUserParams(arg, password)).\n                    Times(1).\n                    Return(user, nil)\n            },\n            checkResponse: func(recoder *httptest.ResponseRecorder) {\n                require.Equal(t, http.StatusOK, recoder.Code)\n                requireBodyMatchUser(t, recoder.Body, user)\n            },\n        }, {\n            name: "InternalError",\n            body: gin.H{\n                "username":  user.Username,\n                "password":  password,\n                "full_name": user.FullName,\n                "email":     user.Email,\n            },\n            buildStubs: func(store *mockdb.MockStore) {\n                arg := db.CreateUserParams{\n                    Username: user.Username,\n                    FullName: user.FullName,\n                    Email:    user.Email,\n                }\n                store.EXPECT().\n                    CreateUser(gomock.Any(), EqCreateUserParams(arg, password)).\n                    Times(1).\n                    Return(db.User{}, sql.ErrConnDone)\n            },\n            checkResponse: func(recoder *httptest.ResponseRecorder) {\n                require.Equal(t, http.StatusInternalServerError, recoder.Code)\n            },\n        }, {\n            name: "ShortPassword",\n            body: gin.H{\n                "username":  user.Username,\n                "password":  "123",\n                "full_name": user.FullName,\n                "email":     user.Email,\n            },\n            buildStubs: func(store *mockdb.MockStore) {\n                store.EXPECT().\n                    CreateUser(gomock.Any(), gomock.Any()).\n                    Times(0)\n            },\n            checkResponse: func(recoder *httptest.ResponseRecorder) {\n                require.Equal(t, http.StatusBadRequest, recoder.Code)\n            },\n        }, {\n            name: "InvalidUsername",\n            body: gin.H{\n                "username":  "name!@!#",\n                "password":  password,\n                "full_name": user.FullName,\n                "email":     user.Email,\n            },\n            buildStubs: func(store *mockdb.MockStore) {\n                store.EXPECT().\n                    CreateUser(gomock.Any(), gomock.Any()).\n                    Times(0)\n            },\n            checkResponse: func(recoder *httptest.ResponseRecorder) {\n                require.Equal(t, http.StatusBadRequest, recoder.Code)\n            },\n        }, {\n            name: "InvalidEmail",\n            body: gin.H{\n                "username":  user.Username,\n                "password":  password,\n                "full_name": user.FullName,\n                "email":     "mail",\n            },\n            buildStubs: func(store *mockdb.MockStore) {\n                store.EXPECT().\n                    CreateUser(gomock.Any(), gomock.Any()).\n                    Times(0)\n            },\n            checkResponse: func(recoder *httptest.ResponseRecorder) {\n                require.Equal(t, http.StatusBadRequest, recoder.Code)\n            },\n        }, {\n            name: "DupEmailAndUsername",\n            body: gin.H{\n                "username":  user.Username,\n                "password":  password,\n                "full_name": user.FullName,\n                "email":     user.Email,\n            },\n            buildStubs: func(store *mockdb.MockStore) {\n                store.EXPECT().\n                    CreateUser(gomock.Any(), gomock.Any()).\n                    Times(1).\n                    Return(db.User{}, &pq.Error{Code: "23505"})\n            },\n            checkResponse: func(recoder *httptest.ResponseRecorder) {\n                require.Equal(t, http.StatusForbidden, recoder.Code)\n            },\n        },\n    }\n\n    for i := range testCases {\n        // \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\n        tc := testCases[i]\n        t.Run(tc.name, func(t *testing.T) {\n            // gomock \ucee8\ud2b8\ub864\ub7ec\n            ctrl := gomock.NewController(t)\n            defer ctrl.Finish()\n\n            // gomock db\n            store := mockdb.NewMockStore(ctrl)\n            // build stub\n            tc.buildStubs(store)\n\n            server := NewServer(store)\n            recoder := httptest.NewRecorder()\n\n            data, err := json.Marshal(tc.body)\n            require.NoError(t, err)\n\n            url := "/users"\n            request, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(data))\n            require.NoError(t, err)\n\n            server.router.ServeHTTP(recoder, request)\n            tc.checkResponse(recoder)\n        })\n    }\n\n}\n\nfunc randomUser(t *testing.T) (user db.User, password string) {\n    password = util.RandomStr(6)\n    hashedPassword, err := util.HashPassword(password)\n    require.NoError(t, err)\n\n    user = db.User{\n        Username:       util.RandomOwner(),\n        HashedPassword: hashedPassword,\n        FullName:       util.RandomOwner(),\n        Email:          util.RandomEmail(),\n    }\n\n    return\n}\n\nfunc requireBodyMatchUser(t *testing.T, body *bytes.Buffer, user db.User) {\n    data, err := io.ReadAll(body)\n    require.NoError(t, err)\n\n    var gotUser db.User\n    err = json.Unmarshal(data, &gotUser)\n\n    require.NoError(t, err)\n    require.Equal(t, user.Username, gotUser.Username)\n    require.Equal(t, user.FullName, gotUser.FullName)\n    require.Equal(t, user.Email, gotUser.Email)\n    require.Empty(t, gotUser.HashedPassword)\n}\n\n')))}m.isMDXComponent=!0}}]);