"use strict";(self.webpackChunkblogsaurus=self.webpackChunkblogsaurus||[]).push([[9490],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},i=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,s=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),p=u(n),d=o,m=p["".concat(s,".").concat(d)]||p[d]||k[d]||c;return n?r.createElement(m,a(a({ref:t},i),{},{components:n})):r.createElement(m,a({ref:t},i))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,a=new Array(c);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var u=2;u<c;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5915:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>k,frontMatter:()=>c,metadata:()=>l,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const c={sidebar_position:14},a="14. [BackEnd] HTTP API test in golang use Mock DB",l={unversionedId:"backend-master/backend14",id:"backend-master/backend14",title:"14. [BackEnd] HTTP API test in golang use Mock DB",description:"\ud559\uc2b5 \ubaa9\ud45c",source:"@site/docs/backend-master/backend14.md",sourceDirName:"backend-master",slug:"/backend-master/backend14",permalink:"/docs/backend-master/backend14",draft:!1,tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14},sidebar:"backSidebar",previous:{title:"13. [BackEnd] load config file & env vars use VIPER",permalink:"/docs/backend-master/backend13"}},s={},u=[{value:"\ud559\uc2b5 \ubaa9\ud45c",id:"\ud559\uc2b5-\ubaa9\ud45c",level:2},{value:"Mock DB",id:"mock-db",level:2},{value:"\uc7a5\uc810",id:"\uc7a5\uc810",level:3},{value:"\uad6c\ud604 \ubc29\ubc95",id:"\uad6c\ud604-\ubc29\ubc95",level:3},{value:"GoMock \uc0ac\uc6a9",id:"gomock-\uc0ac\uc6a9",level:2},{value:"GoMock \uc124\uce58",id:"gomock-\uc124\uce58",level:3},{value:"\ud658\uacbd\ubcc0\uc218 \uc124\uc815",id:"\ud658\uacbd\ubcc0\uc218-\uc124\uc815",level:3},{value:"\ucf54\ub4dc \ubcc0\uacbd",id:"\ucf54\ub4dc-\ubcc0\uacbd",level:3},{value:"gomock \uc0dd\uc131",id:"gomock-\uc0dd\uc131",level:3},{value:"API Test \ucf54\ub4dc \uc791\uc131",id:"api-test-\ucf54\ub4dc-\uc791\uc131",level:2},{value:"\uc801\uc6a9 \ubc94\uc704 100%\ub97c \uc704\ud574",id:"\uc801\uc6a9-\ubc94\uc704-100\ub97c-\uc704\ud574",level:2},{value:"main-test.go \uc791\uc131",id:"main-testgo-\uc791\uc131",level:2}],i={toc:u},p="wrapper";function k(e){let{components:t,...c}=e;return(0,o.kt)(p,(0,r.Z)({},i,c,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"14-backend-http-api-test-in-golang-use-mock-db"},"14. ","[BackEnd]"," HTTP API test in golang use Mock DB"),(0,o.kt)("h2",{id:"\ud559\uc2b5-\ubaa9\ud45c"},"\ud559\uc2b5 \ubaa9\ud45c"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"test\ub97c \uc704\ud55c Mock DB \uc0ac\uc6a9"),(0,o.kt)("h2",{id:"mock-db"},"Mock DB"),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"\uc7a5\uc810"},"\uc7a5\uc810"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"\ub3c5\ub9bd\uc801\uc778 \ud14c\uc2a4\ud2b8\ub97c \uc27d\uac8c \uc791\uc131\ud558\ub294\ub370 \ub3c4\uc6c0\uc774 \ub41c\ub2e4. \ubaa8\ub450\uac00 \uac19\uc740 \ud658\uacbd\uc758 DB\uc5d0\uc11c \uc77d\uace0 \uc4f0\ub294 \ud14c\uc2a4\ud2b8\ub97c \ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"\uc18d\ub3c4\uac00 \ube60\ub974\ub2e4. \uc2e4\uc81c db\ub97c \uc0ac\uc6a9\ud558\uba74 db\uc640 \ud1b5\uc2e0\ud558\ub294\ub370 \uc2dc\uac04\uc774 \uac78\ub9ac\uc9c0\ub9cc Mock DB\ub97c \uc0ac\uc6a9\ud558\uba74 \uadf8\ub807\uc9c0 \uc54a\ub2e4.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"100% test coverage\ud560 \uc218 \uc788\ub2e4. \uc2e4\uc81c DB\ub294 \uc608\uc0c1\uce58 \ubabb\ud55c \uc5d0\ub7ec\ub97c \ub9cc\ub0a0 \uc218 \uc788\uae30 \ub54c\ubb38")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"\uc8fc\uc758\ud560 \uc810\uc740 \uc2e4\uc81c DB\uc640\ub3c4 \ud14c\uc2a4\ud2b8\ub97c \uc5b4\ub290\uc815\ub3c4 \ub9c8\uccd0\uc57c\ud568"))),(0,o.kt)("h3",{id:"\uad6c\ud604-\ubc29\ubc95"},"\uad6c\ud604 \ubc29\ubc95"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"\uba54\ubaa8\ub9ac\uc5d0 \ub370\uc774\ud130 \uc800\uc7a5\ud558\ub294 \uac00\uc9dc db \uad6c\ud604 ( \uad6c\ud604\uc774 \uc27d\uc9c0\ub9cc \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\uac00 \ub108\ubb34 \uae38\uc5b4\uc9c4\ub2e4. )")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"stub\uc744 \uc0ac\uc6a9\ud558\ub294 MOCK DB ( GoMock\uc744 \uc0ac\uc6a9\ud55c\ub2e4. )"))),(0,o.kt)("h2",{id:"gomock-\uc0ac\uc6a9"},"GoMock \uc0ac\uc6a9"),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"gomock-\uc124\uce58"},"GoMock \uc124\uce58"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/golang/mock"},"\uc5ec\uae30"),"\uc5d0\uc11c \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"go install github.com/golang/mock/mockgen@v1.6.0\n")),(0,o.kt)("h3",{id:"\ud658\uacbd\ubcc0\uc218-\uc124\uc815"},"\ud658\uacbd\ubcc0\uc218 \uc124\uc815"),(0,o.kt)("p",null,"mockgen\uc744 \uc0ac\uc6a9\ud574\uc57c \ud558\ub294\ub370 global \uc124\uc815\uc774 \ub418\uc5b4\uc788\uc9c0 \uc54a\uc544\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub2e4. \ud658\uacbd \ubcc0\uc218 \uc124\uc815\uc744 \ud574\uc918\uc57c \ud55c\ub2e4."),(0,o.kt)("p",null,"\uba3c\uc800 mockgen\uc774 \uc798 \uc788\ub098 \ud655\uc778"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ls -al ~/go/bin\n")),(0,o.kt)("p",null,"\uc774\uac70 \ud588\uc744 \ub54c \uc548\ub098\uc624\uba74 \uc798\ubabb\ud55c\uac70\ub2e4."),(0,o.kt)("p",null,"\uc2dc\uc2a4\ud15c \ud658\uacbd\ubcc0\uc218\uc5d0\uc11c ",(0,o.kt)("inlineCode",{parentName:"p"},"~/go/bin"),"\uc744 \ucd94\uac00\ud55c\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"which mockgen\n")),(0,o.kt)("p",null,"\uc704 \ucf54\ub4dc\ub85c \ub2e4\uc2dc \ud655\uc778\ud55c\ub2e4. \uc5b4\ubb34\ud3f4\ub354\uc5d0\uc11c \uacbd\ub85c\uac00 \uc798 \ub098\uc628\ub2e4\uba74 \uc798 \uc124\uc815\uc774 \ub41c \uac83"),(0,o.kt)("h3",{id:"\ucf54\ub4dc-\ubcc0\uacbd"},"\ucf54\ub4dc \ubcc0\uacbd"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"store.go"))),(0,o.kt)("p",null,"\uae30\uc874 store\ub97c \ubcc0\uacbd\ud574\uc57c \ud558\uace0.. \uad6c\uc870\uac00 \ub9ce\uc774 \ub2ec\ub77c\uc9d1\ub2c8\ub2e4."),(0,o.kt)("p",null,"sqlc \uc124\uc815 \uc911 ",(0,o.kt)("inlineCode",{parentName:"p"},"emit_interface"),"\ub97c true\ub85c \ud558\uc5ec queries \uad6c\uc870\uccb4\uc758 \ubaa8\ub4e0 \uae30\ub2a5\uc744 \ud3ec\ud568\ud558\uc5ec \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc0dd\uc131\ud558\ub3c4\ub85d \ud574\uc90d\ub2c8\ub2e4."),(0,o.kt)("p",null,"\ub2e4\uc2dc sqlc\ud558\uba74 "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type Querier interface {\n    AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Account, error)\n    CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error)\n    CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error)\n    CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error)\n    DeleteAccount(ctx context.Context, id int64) error\n    DeleteEntry(ctx context.Context, id int64) error\n    DeleteTransfer(ctx context.Context, id int64) error\n    GetAccount(ctx context.Context, id int64) (Account, error)\n    GetAccountForUpdate(ctx context.Context, id int64) (Account, error)\n    GetEntry(ctx context.Context, id int64) (Entry, error)\n    GetTransfer(ctx context.Context, id int64) (Transfer, error)\n    ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error)\n    ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error)\n    ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error)\n    UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error)\n    UpdateEntry(ctx context.Context, arg UpdateEntryParams) (Entry, error)\n    UpdateTransfer(ctx context.Context, arg UpdateTransferParams) (Transfer, error)\n}\n\nvar _ Querier = (*Queries)(nil)\n")),(0,o.kt)("p",null,"\uc774\uc804\uc5d0 \ub9cc\ub4e0 query\ub4e4\uc774 \ub2e4 \ubaa8\uc5ec\uc788\uace0"),(0,o.kt)("p",null,"\uc774 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc0c8\ub85c\uc6b4 \uc778\ud130\ud398\uc774\uc2a4\uc5d0 \uc785\ub825\ud55c\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type Store interface {\n    Querier\n    TransferTx(ctx context.Context, arg TransferTxParams) (TransferTxResult, error)\n}\n")),(0,o.kt)("p",null,"\uc774\uac8c \uc0c8\ub85c\uc6b4 mock\uc744 \uc704\ud55c store\uace0 \uae30\uc874 store\ub294 "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SQLStore struct {\n    *Queries         // \uc0c1\uc18d\n    db       *sql.DB // db \ub9cc\ub4dc\ub294\ub370 \ud544\uc218\n}\n")),(0,o.kt)("p",null,"\uc774\ub984\uc744 \ubc14\uafd4\uc8fc\uace0 \uad00\ub828\ub41c \uac83\ub4e4\ub3c4 \ubc14\uafd4\uc900\ub2e4."),(0,o.kt)("p",null,"\uadf8\ub9ac\uace0 Store\ub294 \uc778\ud130\ud398\uc774\uc2a4\uc774\uae30 \ub54c\ubb38\uc5d0 \ud3ec\uc778\ud130 \uc5c6\uc564\ub2e4."),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"server.go"))),(0,o.kt)("p",null,"store\uac00 \uc778\ud130\ud398\uc774\uc2a4\uac00 \ub410\uae30\uc5d0 \ud3ec\uc778\ud130\ub294 \ube7c\uc900\ub2e4."),(0,o.kt)("h3",{id:"gomock-\uc0dd\uc131"},"gomock \uc0dd\uc131"),(0,o.kt)("p",null,"db \ubc11\uc5d0 mock \ud3f4\ub354 \uc0dd\uc131\ud55c\ub2e4."),(0,o.kt)("p",null,"source \ubaa8\ub4dc\uc640 reflect \ubaa8\ub4dc\uac00 \uc788\ub2e4. source \ubaa8\ub4dc\ub294 \ub2e8\uc77c \uc18c\uc2a4 \ud30c\uc77c\uc5d0\uc11c \ubaa8\uc758 \uc778\ud130\ud398\uc774\uc2a4 \uc0dd\uc131\ud558\uace0 reflect\ub294 \uc774\ub984\uacfc \uc778\ud130\ud398\uc774\uc2a4\ub9cc \uc81c\uacf5\ud558\uace0 mockgen\uc774 \ub9ac\ud50c\ub809\uc158\ud574\uc11c \uc790\ub3d9\uc73c\ub85c \ud30c\uc545\ud568"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"mockgen <store \uacbd\ub85c> <\uc778\ud130\ud398\uc774\uc2a4 \uc774\ub984>\n")),(0,o.kt)("p",null,"\uc704\ucc98\ub7fc \uc785\ub825\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"mockgen -package mockdb -destination db/mock/store.go simplebank/db/sqlc Store\n")),(0,o.kt)("p",null,"\uc704\ub294 \uc2e4\uc81c \uc785\ub825 \uba85\ub839\uc5b4\ub2e4."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"-destination")," : mockgen \uc0dd\uc131\ub41c \ucf54\ub4dc \uacbd\ub85c \uc9c0\uc815\n",(0,o.kt)("inlineCode",{parentName:"p"},"-package")," : package\uc774\ub984\uc744 \uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Alt text",src:n(2087).Z,width:"628",height:"547"})),(0,o.kt)("p",null,"\uc774\ub807\uac8c \uc790\ub3d9 \ucf54\ub4dc \uc0dd\uc131\ub429\ub2c8\ub2e4."),(0,o.kt)("h2",{id:"api-test-\ucf54\ub4dc-\uc791\uc131"},"API Test \ucf54\ub4dc \uc791\uc131"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\uc900\ube44")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func TestGetAccountAPI(t *testing.T) {\n    account := randomAccount()\n\n    ctrl := gomock.NewController(t)\n    defer ctrl.Finish()\n\n    store := mockdb.NewMockStore(ctrl)\n}\n")),(0,o.kt)("p",null,"stub\uc744 \uc0dd\uc131\ud560 \uc900\ube44\ub97c \ub9c8\ucce4\uc2b5\ub2c8\ub2e4."),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"stub \uc0dd\uc131")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"store.EXPECT().\n    GetAccount(gomock.Any(), gomock.Eq(account.ID)).\n    Times(1).\n    Return(account, nil)\n")),(0,o.kt)("p",null,"account\uc5d0 \ub300\ud55c stub\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4."),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"\uc11c\ubc84\uc5d0 \uc694\uccad \ubcf4\ub0b4\uae30")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'server := NewServer(store)\nrecoder := httptest.NewRecorder()\n\nurl := fmt.Sprintf("/accounts/%d", account.ID)\nrequest, err := http.NewRequest(http.MethodGet, url, nil)\nrequire.NoError(t, err)\n\nserver.router.ServeHTTP(recoder, request)\n')),(0,o.kt)("p",null,"\ud14c\uc2a4\ud2b8\ub97c \uc704\ud574\uc11c \uc2e4\uc81c \uc11c\ubc84\ub97c \uc5f4 \ud544\uc694\uac00 \uc5c6\uae30\uc5d0 httptest \ud328\ud0a4\uc9c0\ub97c \uc0ac\uc6a9\ud574\uc11c api \uc694\uccad\uc758 \uc751\ub2f5\ub9cc \uae30\ub85d\ud569\ub2c8\ub2e4."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"httptest.NewRecorder"),"\ub97c \uc774\uc6a9\ud574\uc11c recoder\ub97c \ub9cc\ub4e4\uace0"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"http.NewRequest"),"\ub97c \uc0ac\uc6a9\ud574\uc11c GET \uc694\uccad\uc744 \ubcf4\ub0c5\ub2c8\ub2e4 !"),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"\uc751\ub2f5\uc774 \uc798 \uc654\ub098 \ud655\uc778")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"require.Equal(t, http.StatusOK, recoder.Code)\n")),(0,o.kt)("p",null,"recoder\uc758 \ucf54\ub4dc\uac00 200\uc778\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4."),(0,o.kt)("p",null,"\uadf8\ub9ac\uace0 \uc870\ud68c\ud55c \uac12\ub3c4 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"{\n    ...\n    requireBodyMatchAccount(t, recoder.Body, account)\n}\n\nfunc requireBodyMatchAccount(t *testing.T, body *bytes.Buffer, account db.Account) {\n    data, err := io.ReadAll(body)\n    require.NoError(t, err)\n\n    var gotAccount db.Account\n    err = json.Unmarshal(data, &gotAccount)\n    require.NoError(t, err)\n    // account : \ub9cc\ub4e0 \uacc4\uc815\n    // gotAccount : GET\uc73c\ub85c \uc5bb\uc740 \uacc4\uc815\n    require.Equal(t, account, gotAccount)\n}\n")),(0,o.kt)("p",null,"recoder.Body\ub97c \ud1b5\ud574\uc11c bytes.Buffer\ub85c \ubc18\ud658\ub418\ub294 \uac12\uc744 \uc77d\uc744 \uc218 \uc788\ub294\ub370 \uccb4\ud06c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("h2",{id:"\uc801\uc6a9-\ubc94\uc704-100\ub97c-\uc704\ud574"},"\uc801\uc6a9 \ubc94\uc704 100%\ub97c \uc704\ud574"),(0,o.kt)("p",null,"\ud14c\uc774\ube14 \uae30\ubc18 \ud14c\uc2a4\ud2b8 \uc138\ud2b8\ub85c \ubcc0\ud658\ud574\uc57c \ud55c\ub2e4."),(0,o.kt)("p",null,"\uadf8\ub7ec\ub824\uba74 test case\uac00 \ud544\uc694\ud558\ub2e4."),(0,o.kt)("p",null,".\n.\n."),(0,o.kt)("p",null,"( test case\ub97c \uc801\uc6a9\ud558\ub294 \uacfc\uc815\uc740 \uc815\ub9d0 \uc5b4\uc9c0\ub7ec\uc6e0\uc2b5\ub2c8\ub2e4. \uadf8\ub798\ub3c4 \uc815\ub9ac\ub97c \ud574\ubcf4\ub824 \ud569\ub2c8\ub2e4. )"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func TestGetAccountAPI(t *testing.T) {\n    account := randomAccount()\n\n    testCases := []struct {\n        name          string                        // \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \uc774\ub984\n        accountID     int64                         // \uc5bb\uace0\uc790\ud558\ub294 \uacc4\uc815 ID\n        buildStubs    func(store *mockdb.MockStore) //\ud14c\uc2a4\ud2b8 \uc0ac\ub840\uc758 \ubaa9\uc801\uc5d0 \ub9de\ub294 \uc2a4\ud141 \uc0dd\uc131\n        checkResponse func(t *testing.T, recoder *httptest.ResponseRecorder)\n    }{\n        {\n            name:      "OK",\n            accountID: account.ID,\n            buildStubs: func(store *mockdb.MockStore) {\n                //build stubs\n                store.EXPECT().\n                    GetAccount(gomock.Any(), gomock.Eq(account.ID)).\n                    Times(1).\n                    Return(account, nil)\n            },\n            checkResponse: func(t *testing.T, recoder *httptest.ResponseRecorder) {\n                // check response\n                require.Equal(t, http.StatusOK, recoder.Code)\n                requireBodyMatchAccount(t, recoder.Body, account)\n            },\n        },\n        // CAN ADD MORE CASE\n    }\n\n    for i := range testCases {\n\n        // \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\n        tc := testCases[i]\n        t.Run(tc.name, func(t *testing.T) {\n            ctrl := gomock.NewController(t)\n            defer ctrl.Finish()\n\n            store := mockdb.NewMockStore(ctrl)\n            // build stub\n            tc.buildStubs(store)\n\n            // start server and send requests\n            // \ud14c\uc2a4\ud2b8\ub97c \uc704\ud574 \uc2e4\uc81c \uc11c\ubc84\ub97c \uc5f4 \ud544\uc694\ub294 \uc5c6\ub2e4\n            // httptest \ud328\ud0a4\uc9c0\ub97c \uc0ac\uc6a9\ud574\uc11c api \uc694\uccad\uc758 \uc751\ub2f5\uc744 \uae30\ub85d\ud558\uba74 \ub41c\ub2e4.\n            server := NewServer(store)\n            recoder := httptest.NewRecorder()\n\n            url := fmt.Sprintf("/accounts/%d", account.ID)\n            request, err := http.NewRequest(http.MethodGet, url, nil)\n            require.NoError(t, err)\n\n            server.router.ServeHTTP(recoder, request)\n            tc.checkResponse(t, recoder)\n        })\n    }\n}\n')),(0,o.kt)("p",null,"\ucf54\ub4dc\uac00 \uc774\ub807\uac8c \ubc14\ub00c\ub294\ub370\uc694 \ub2e4\uc2dc \ucc9c\ucc9c\ud788 \uc0b4\ud3b4\ubcf4\uba74"),(0,o.kt)("p",null,"\ud06c\uac8c \ucd94\uac00\ub41c \ubd80\ubd84\uc740 ",(0,o.kt)("inlineCode",{parentName:"p"},"testCases")," \uad6c\uc870\uccb4 \uc785\ub2c8\ub2e4.\n",(0,o.kt)("inlineCode",{parentName:"p"},"name"),"\uc740 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \uc774\ub984 ",(0,o.kt)("inlineCode",{parentName:"p"},"accountID"),"\ub294 \ub2f9\uc5f0\ud788 \uacc4\uc815 \uc544\uc774\ub514 ",(0,o.kt)("inlineCode",{parentName:"p"},"buildStubs"),"\ub294 \uc774\uc804\uc5d0 stub\uc744 \ube4c\ub4dc\ud558\uac8c \ud574\uc900 \ud568\uc218 ",(0,o.kt)("inlineCode",{parentName:"p"},"checkResponse"),"\ub294 \uc774\uc804\uc5d0 \uc751\ub2f5\uac12 \uac80\uc99d\ud55c \ub85c\uc9c1\uc785\ub2c8\ub2e4."),(0,o.kt)("p",null,"\uae30\uc874 \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\uc5d0\uc11c \ud574\ub2f9 \uad6c\uc870\uccb4\uc5d0 \ud574\ub2f9\ud558\ub294 \ud568\uc218\ub85c \uad50\uccb4\ub97c \ud574\uc900\ub2e4\uba74 \ub2e4\uc591\ud55c \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub4e4\uc744 \ucd94\uac00\ud574\uc11c \ud55c\ubc88\uc5d0 \ud14c\uc2a4\ud2b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uacc4\uc815\uc774 \uc5c6\ub294 \uacbd\uc6b0\ub77c\ub358\uc9c0, ID\uac12\uc774 \uc774\uc0c1\ud558\ub2e4\ub358\uc9c0 \ub4f1\ub4f1.."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'{\n    name:      "NotFound",\n    accountID: account.ID,\n    buildStubs: func(store *mockdb.MockStore) {\n        //build stubs\n        store.EXPECT().\n            GetAccount(gomock.Any(), gomock.Eq(account.ID)).\n            Times(1).\n            Return(db.Account{}, sql.ErrNoRows)\n    },\n    checkResponse: func(t *testing.T, recoder *httptest.ResponseRecorder) {\n        // check response\n        require.Equal(t, http.StatusNotFound, recoder.Code)\n    },\n},\n')),(0,o.kt)("p",null,"\uadf8\ub798\uc11c \uc704\uc640 \uac19\uc774 \uc0c8\ub85c\uc6b4 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub97c \ucd94\uac00\ud560 \uc218 \uc788\ub294\ub370 ",(0,o.kt)("inlineCode",{parentName:"p"},"OK")," \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc640 \ucc28\uc774\uc810\uc744 \uc801\uc790\uba74 buildStubs \ubd80\ubd84\uacfc checkResponse \ubd80\ubd84\uc774 \ubc14\ub01d\ub2c8\ub2e4."),(0,o.kt)("p",null,"store.EXPECT()\ub85c \ub9cc\ub4e0 stub\uc758 Return\uc744 \uc5c6\ub294 \uacc4\uc815\uc744 \ubc18\ud658\ud55c\ub2e4\ub358\uc9c0 \uc5d0\ub7ec \ucf54\ub4dc\uac00 NotFound\uc778\uc9c0 \ub4f1\uc744 \ud655\uc778\ud569\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'{\n        {\n            name:      "OK",\n            accountID: account.ID,\n            buildStubs: func(store *mockdb.MockStore) {\n                //build stubs\n                store.EXPECT().\n                    GetAccount(gomock.Any(), gomock.Eq(account.ID)).\n                    Times(1).\n                    Return(account, nil)\n            },\n            checkResponse: func(t *testing.T, recoder *httptest.ResponseRecorder) {\n                // check response\n                require.Equal(t, http.StatusOK, recoder.Code)\n                requireBodyMatchAccount(t, recoder.Body, account)\n            },\n        }, {\n            name:      "NotFound",\n            accountID: account.ID,\n            buildStubs: func(store *mockdb.MockStore) {\n                //build stubs\n                store.EXPECT().\n                    GetAccount(gomock.Any(), gomock.Eq(account.ID)).\n                    Times(1).\n                    Return(db.Account{}, sql.ErrNoRows)\n            },\n            checkResponse: func(t *testing.T, recoder *httptest.ResponseRecorder) {\n                // check response\n                require.Equal(t, http.StatusNotFound, recoder.Code)\n            },\n        }, {\n            name:      "InternalError",\n            accountID: account.ID,\n            buildStubs: func(store *mockdb.MockStore) {\n                //build stubs\n                store.EXPECT().\n                    GetAccount(gomock.Any(), gomock.Eq(account.ID)).\n                    Times(1).\n                    Return(db.Account{}, sql.ErrConnDone)\n            },\n            checkResponse: func(t *testing.T, recoder *httptest.ResponseRecorder) {\n                // check response\n                require.Equal(t, http.StatusInternalServerError, recoder.Code)\n            },\n        }, {\n            name:      "BadRequest",\n            accountID: 0,\n            buildStubs: func(store *mockdb.MockStore) {\n                //build stubs\n                store.EXPECT().\n                    GetAccount(gomock.Any(), gomock.Any()).\n                    Times(0)\n            },\n            checkResponse: func(t *testing.T, recoder *httptest.ResponseRecorder) {\n                // check response\n                require.Equal(t, http.StatusBadRequest, recoder.Code)\n            },\n        },\n\n        // CAN ADD MORE CASE\n}\n')),(0,o.kt)("p",null,"\uc9c0\uae08\uae4c\uc9c0 \uc791\uc131\ud55c \ud14c\uc2a4\ud2b8\ucf54\ub4dc\ub294 \uc774\ub7ec\ud55c\ub370 \uac01\uac01\uc758 \ud2b9\uc9d5\uc744 \ubcf4\uba74\uc11c \uc775\ud600\uc57c\ud560 \uac83 \uac19\ub2e4."),(0,o.kt)("h2",{id:"main-testgo-\uc791\uc131"},"main-test.go \uc791\uc131"),(0,o.kt)("hr",null),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func TestMain(m *testing.M) {\n    gin.SetMode(gin.TestMode)\n    // \ud14c\uc2a4\ud2b8 \uc2dc\uc791\n    os.Exit(m.Run())\n}\n")),(0,o.kt)("p",null,"\ub514\ubc84\uae45\uc744 \uc704\ud574\uc11c gin\uc744 test\ubaa8\ub4dc\ub85c \uc124\uc815\ud55c\ub2e4."))}k.isMDXComponent=!0},2087:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image1-ba8b3e2b862662d44cc59cd24460c73f.png"}}]);